// This is generated code. Should not be manually modified.

package omega

import (
	"time"
	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/btcsuite/btcd/wire"
	"github.com/btcsuite/omega/token"
)

var IntlDateLine = [][2]float64 {	// international date line
	{ 90.000000, 180.000000 },
	{ 75.000000, 180.000000 },
	{ 68.245600, -169.000000 },
	{ 65.518900, -169.000000 },
	{ 53.086300, 170.050000 },
	{ 47.835300, 180.000000 },
	{ -1.200000, 180.000000 },
	{ -1.200000, -159.650000 },
	{ 2.900000, -159.650000 },
	{ 2.900000, -162.850000 },
	{ 6.500000, -162.850000 },
	{ 6.500000, -155.950000 },
	{ -9.500000, -149.650000 },
	{ -11.700000, -149.650000 },
	{ -11.700000, -154.050000 },
	{ -10.700000, -154.050000 },
	{ -10.700000, -166.550000 },
	{ -15.600000, -172.700000 },
	{ -45.000000, -172.700000 },
	{ -51.181500, 180.000000 },
	{ -90.000000, 180.000000 },
}

var InitDefs = []token.Definition{
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: [12]byte{0x00, 0x00, 0x80, 0x16, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0x80, 0xe9, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: [12]byte{0x00, 0x00, 0x80, 0xe9, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0x80, 0xe9, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: [12]byte{0x00, 0x00, 0x80, 0xe9, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0x80, 0x16, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: [12]byte{0x00, 0x00, 0x80, 0x16, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0x80, 0x16, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x00, 0x00, 0x80, 0x16, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xc0, 0x12, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x00, 0x00, 0x80, 0xe9, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x4e, 0x62, 0x34, 0xf3, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x00, 0x00, 0xc0, 0x12, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0xe9, 0xb7, 0x0f, 0x11, 0x00, 0x00, 0xc0, 0xd5, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x4e, 0x62, 0x34, 0xf3, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xc0, 0xf4, 0x33, 0x33, 0xd3, 0x2e, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0xe9, 0xb7, 0x0f, 0x11, 0x00, 0x00, 0xc0, 0xd5, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0xa8, 0x35, 0x61, 0x10, 0x00, 0x00, 0xc0, 0xd5, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x00, 0x00, 0xc0, 0xf4, 0x33, 0x33, 0xd3, 0x2e, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x9a, 0x99, 0x19, 0xfc, 0x33, 0x33, 0xd3, 0x2e, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0xa8, 0x35, 0x61, 0x10, 0x00, 0x00, 0xc0, 0xd5, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0xf0, 0x85, 0x45, 0x0d, 0x34, 0x33, 0x83, 0xd0, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x9a, 0x99, 0x19, 0xfc, 0x33, 0x33, 0xd3, 0x2e, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcc, 0xcc, 0x5c, 0x30, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0xf0, 0x85, 0x45, 0x0d, 0x34, 0x33, 0x83, 0xd0, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x8e, 0x75, 0xf5, 0x0b, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcc, 0xcc, 0x5c, 0x30, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcc, 0xcc, 0x7c, 0x33, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x8e, 0x75, 0xf5, 0x0b, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcc, 0xcc, 0x7c, 0x33, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x13, 0xfd, 0xcc, 0xcc, 0x7c, 0x33, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x67, 0x66, 0x16, 0xd8, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x34, 0x33, 0x13, 0xfd, 0xcc, 0xcc, 0x7c, 0x33, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x13, 0xfd, 0x66, 0x66, 0x96, 0x34, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x67, 0x66, 0x16, 0xd8, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x67, 0x66, 0x16, 0xd8, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x34, 0x33, 0x13, 0xfd, 0x66, 0x66, 0x96, 0x34, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xa0, 0xfd, 0x66, 0x66, 0x96, 0x34, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x67, 0x66, 0x16, 0xd8, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x9a, 0x99, 0x49, 0xd7, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x00, 0x00, 0xa0, 0xfd, 0x66, 0x66, 0x96, 0x34, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x33, 0x33, 0x03, 0x33, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x9a, 0x99, 0x49, 0xd7, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x9a, 0x99, 0x49, 0xd7, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x33, 0x33, 0x03, 0x33, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x99, 0x99, 0x49, 0x31, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x9a, 0x99, 0x49, 0xd7, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x34, 0x33, 0x03, 0xd9, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x99, 0x99, 0x49, 0x31, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x99, 0x99, 0x49, 0x31, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x00, 0x00, 0xa0, 0x01, 0x34, 0x33, 0x03, 0xd9, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xa0, 0xfd, 0x67, 0x66, 0x96, 0xda, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x99, 0x99, 0x49, 0x31, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x66, 0x66, 0x16, 0x32, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x00, 0x00, 0xa0, 0xfd, 0x67, 0x66, 0x96, 0xda, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x13, 0xfd, 0x67, 0x66, 0x96, 0xda, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x99, 0x99, 0xb9, 0x00, 0x66, 0x66, 0x16, 0x32, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x66, 0x66, 0x16, 0x32, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x34, 0x33, 0x13, 0xfd, 0x67, 0x66, 0x96, 0xda, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x13, 0xfd, 0xcd, 0xcc, 0x7c, 0xd9, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x66, 0x66, 0x16, 0x32, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x34, 0x33, 0x13, 0xfd, 0xcd, 0xcc, 0x7c, 0xd9, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcd, 0xcc, 0x7c, 0xd9, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x34, 0x33, 0xb3, 0xff, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x8e, 0x75, 0xf5, 0x0b, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcd, 0xcc, 0x7c, 0xd9, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcd, 0xcc, 0x5c, 0xd6, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x8e, 0x75, 0xf5, 0x0b, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0xf0, 0x85, 0x45, 0x0d, 0x33, 0x33, 0x83, 0x2a, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x34, 0x33, 0x53, 0xfd, 0xcd, 0xcc, 0x5c, 0xd6, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x9a, 0x99, 0x19, 0xfc, 0x34, 0x33, 0xd3, 0xd4, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0xf0, 0x85, 0x45, 0x0d, 0x33, 0x33, 0x83, 0x2a, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0xa8, 0x35, 0x61, 0x10, 0x00, 0x00, 0xc0, 0x2f, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x9a, 0x99, 0x19, 0xfc, 0x34, 0x33, 0xd3, 0xd4, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xc0, 0xf4, 0x34, 0x33, 0xd3, 0xd4, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0xa8, 0x35, 0x61, 0x10, 0x00, 0x00, 0xc0, 0x2f, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0xe9, 0xb7, 0x0f, 0x11, 0x00, 0x00, 0xc0, 0x2f, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x00, 0x00, 0xc0, 0xf4, 0x34, 0x33, 0xd3, 0xd4, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x4e, 0x62, 0x34, 0xf3, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0xe9, 0xb7, 0x0f, 0x11, 0x00, 0x00, 0xc0, 0x2f, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0xc0, 0x12, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		Begin: [12]byte{0x4e, 0x62, 0x34, 0xf3, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0x80, 0xe9, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.BorderDef {
		Father: chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		Begin: [12]byte{0x00, 0x00, 0xc0, 0x12, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
		End: [12]byte{0x00, 0x00, 0x80, 0x16, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, },
	},
	&token.PolygonDef {	Loops: []token.LoopDef{{	// Loop 0:
		chainhash.Hash{
		0xe4, 0xeb, 0x13, 0x9f, 0xfb, 0xe6, 0x58, 0x07, 
		0xdc, 0x4f, 0xcd, 0xbd, 0x59, 0xbc, 0x33, 0x1d, 
		0x42, 0x32, 0xac, 0x47, 0x58, 0x2d, 0x16, 0xe5, 
		0x12, 0xe0, 0x08, 0x19, 0x7b, 0xb7, 0x7c, 0xbd, 
	},
		chainhash.Hash{
		0x0e, 0xce, 0xd8, 0x56, 0x23, 0x59, 0x85, 0x81, 
		0xac, 0x13, 0x63, 0x31, 0x0d, 0xa7, 0x08, 0x01, 
		0x8e, 0xbf, 0x64, 0x6b, 0xc5, 0x00, 0xef, 0xe1, 
		0x38, 0x64, 0xd3, 0xa6, 0xf5, 0xb6, 0xf9, 0x55, 
	},
		chainhash.Hash{
		0x80, 0xf3, 0x1f, 0x55, 0x3a, 0xdc, 0x1d, 0x63, 
		0x07, 0x4c, 0xbd, 0x07, 0x63, 0x43, 0xe0, 0xef, 
		0x3b, 0x0e, 0x00, 0x8c, 0x52, 0x01, 0xb7, 0x04, 
		0xd1, 0x0f, 0xe1, 0x25, 0x63, 0x69, 0x1b, 0x56, 
	},
		chainhash.Hash{
		0x1a, 0x15, 0xb7, 0x2c, 0x49, 0xed, 0xda, 0x45, 
		0xc6, 0x09, 0x47, 0x6e, 0x25, 0xd3, 0xf6, 0x85, 
		0x5d, 0x8a, 0x53, 0x18, 0x28, 0x4f, 0xfe, 0x42, 
		0xd8, 0x7e, 0xb9, 0x2d, 0x0b, 0x9c, 0x05, 0x80, 
	},
			},
		},
	},
	&token.RightDef {Father: chainhash.Hash{},
		Desc: []byte("All Rights"),
		Attrib: 3,
	},
}

var coinToken = token.Token{
	TokenType: 0,
	Value: &token.NumToken{Val: 5000000000},
	Rights: &chainhash.Hash{},
}

var genesisCoinbaseTx = wire.MsgTx{
	Version: 1,
	TxDef: []token.Definition{},
	TxIn: []*wire.TxIn{
		{
			PreviousOutPoint: wire.OutPoint{
			Hash:  chainhash.Hash{},
			Index: 0,
		},
		SignatureIndex: 0xffffffff,
		Sequence: 0xffffffff,
	},
	},
	TxOut: []*wire.TxOut{
		{
			Token:coinToken,
			PkScript: []byte{
				0x6f, 0x2f, 0xe0, 0xef, 0x92, 0x85, 0xa1, 0x0e, 0x86, 0x0c, 0x25, 0xe0,
				0x3c, 0x3f, 0xf8, 0x59, 0x93, 0xd3, 0xff, 0xc3, 0x5e, 0x41, 0x00, 0x00, 0x00,
			},
		},
	},
	SignatureScripts: [][]byte { []byte{
		0, 0, 0, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, 0, 0, 0, 0, 
	} },
	LockTime: 0,
}

var polygonToken = token.Token{
	TokenType: 3,
	Value: &token.HashToken{Hash: chainhash.Hash{
		0x9a, 0x71, 0xd2, 0x13, 0xbc, 0x16, 0x67, 0xf6, 
		0x5c, 0x03, 0xf6, 0x79, 0xfe, 0xfa, 0xbc, 0xdc, 
		0x95, 0xe9, 0xcb, 0x7c, 0x1f, 0x56, 0x00, 0xd2, 
		0xd3, 0x41, 0xcd, 0xfe, 0xa8, 0xb3, 0x63, 0x76, 
	}},
	Rights: &chainhash.Hash{
		0x26, 0x76, 0x88, 0xb6, 0x9c, 0x2b, 0xba, 0xa2, 
		0x8c, 0x3c, 0x32, 0x16, 0x3a, 0x92, 0x41, 0x50, 
		0x1a, 0xbd, 0x95, 0x8a, 0xe3, 0xca, 0x2b, 0x60, 
		0xee, 0x9a, 0x8f, 0xd0, 0xc2, 0xec, 0xe6, 0x59, 
	},
}

var genesisInitPolygonTx = wire.MsgTx{
	Version: 1,
	TxDef: InitDefs,
	TxIn: []*wire.TxIn{},
	TxOut: []*wire.TxOut{
		{
			Token: polygonToken,
			PkScript: []byte{
				0x6f, 0x2f, 0xe0, 0xef, 0x92, 0x85, 0xa1, 0x0e, 0x86, 0x0c, 0x25, 0xe0,
				0x3c, 0x3f, 0xf8, 0x59, 0x93, 0xd3, 0xff, 0xc3, 0x5e, 0x41, 0x00, 0x00, 0x00,
			},
		},
	},
	LockTime: 0,
}

var GenesisMerkleRoot = chainhash.Hash{
		0xd5, 0x21, 0x02, 0x11, 0x17, 0x4f, 0x86, 0x20, 
		0xd7, 0x88, 0x03, 0x69, 0x72, 0xbc, 0xb8, 0xde, 
		0xba, 0xd3, 0x99, 0x1c, 0x67, 0xc7, 0x69, 0xab, 
		0x53, 0x87, 0xd0, 0x18, 0xaa, 0x2d, 0x05, 0x71, 
	}

var GenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},
		MerkleRoot: GenesisMerkleRoot,
		Timestamp:  time.Unix(0x5eb6fb2e, 0), 
		Nonce:      98991,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}

var creator = [20]byte{0x2f, 0xe0, 0xef, 0x92, 0x85, 0xa1, 0xe, 0x86, 0xc, 0x25,
	0xe0, 0x3c, 0x3f, 0xf8, 0x59, 0x93, 0xd3, 0xff, 0xc3, 0x5e, }

var  GenesisHash = []chainhash.Hash{
chainhash.Hash{
		0xf3, 0xf4, 0x52, 0x6e, 0x93, 0xac, 0x19, 0x28, 
		0x03, 0xce, 0x8c, 0x51, 0xa9, 0xe5, 0x37, 0x29, 
		0xf6, 0xe5, 0x0a, 0x1e, 0x05, 0x3e, 0xab, 0x54, 
		0x4a, 0x63, 0x07, 0x32, 0x8b, 0x21, 0x00, 0x00, 
	},
chainhash.Hash{
		0xa8, 0xda, 0x57, 0x8a, 0xb8, 0xac, 0xa0, 0x0d, 
		0xa7, 0x5c, 0xf5, 0xd0, 0xed, 0x16, 0xd1, 0xbd, 
		0x33, 0xc0, 0xbd, 0xd8, 0x03, 0x82, 0xc1, 0x60, 
		0x6d, 0x42, 0x6c, 0x54, 0x61, 0xdd, 0x00, 0x00, 
	},
}

var GenesisMinerBlock = wire.MingingRightBlock{
	Version:    GenesisBlock.Header.Version,
	PrevBlock:  chainhash.Hash{},
	BestBlock: GenesisHash[0],
	Timestamp:  GenesisBlock.Header.Timestamp, 
	Bits:      0x1f00ffff,
	Nonce:      32321,
	Miner: creator,
}

var RegTestGenesisHash = []chainhash.Hash{
chainhash.Hash{
		0x16, 0x6b, 0xb9, 0x5b, 0x21, 0x6e, 0xd5, 0x50, 
		0xbb, 0x12, 0xbc, 0x77, 0x85, 0xd7, 0x14, 0x9e, 
		0x6a, 0xae, 0xd3, 0xfb, 0xbf, 0xc5, 0xef, 0xe7, 
		0x25, 0x1b, 0xfc, 0x86, 0x8e, 0x9e, 0x32, 0x00, 
	},
chainhash.Hash{
		0x5d, 0x57, 0xaa, 0x35, 0x6a, 0x6d, 0xe1, 0x1b, 
		0xb5, 0xb4, 0xa6, 0x62, 0x7a, 0x81, 0x5d, 0x92, 
		0xf1, 0x02, 0x53, 0xda, 0xb1, 0xdb, 0xdb, 0xc6, 
		0x65, 0xb3, 0x62, 0x90, 0xb1, 0xc1, 0x7a, 0x00, 
	},
}

var RegTestGenesisMerkleRoot = GenesisMerkleRoot

var regGenesisCoinbaseTx = genesisCoinbaseTx

var RegTestGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},
		MerkleRoot: RegTestGenesisMerkleRoot,
		Timestamp:  time.Unix(0x5eb6fb30, 0), 
		Nonce:      120,
	},
	Transactions: []*wire.MsgTx{&regGenesisCoinbaseTx, &genesisInitPolygonTx},
}

var RegTestGenesisMinerBlock = wire.MingingRightBlock{
	Version:    RegTestGenesisBlock.Header.Version,
	PrevBlock:  chainhash.Hash{},
	BestBlock: RegTestGenesisHash[0],
	Timestamp:  RegTestGenesisBlock.Header.Timestamp, 
	Bits:      0x1f7fffff,
	Nonce:      302,
	Miner: creator,
}

var TestNet3GenesisHash = []chainhash.Hash{
chainhash.Hash{
		0xd0, 0xed, 0x2d, 0xc9, 0xcd, 0x6f, 0x51, 0x8e, 
		0xe6, 0x7e, 0x0c, 0xa8, 0x47, 0x29, 0x8e, 0x3c, 
		0xcf, 0x32, 0xed, 0x32, 0xc7, 0xb1, 0xcb, 0xcd, 
		0x6e, 0x9f, 0xe4, 0xed, 0x46, 0xc9, 0x00, 0x00, 
	},
chainhash.Hash{
		0x03, 0x18, 0xa2, 0xae, 0x47, 0xde, 0xff, 0x2e, 
		0x05, 0x4c, 0x12, 0x28, 0xad, 0x6c, 0x37, 0x9b, 
		0x77, 0xd2, 0x92, 0xcd, 0xb6, 0x1b, 0x4c, 0x8a, 
		0x7f, 0x80, 0x1a, 0x0c, 0x98, 0x3c, 0x00, 0x00, 
	},
}

var TestNet3GenesisMerkleRoot = GenesisMerkleRoot

var test3netgenesisCoinbaseTx = genesisCoinbaseTx

var TestNet3GenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},
		MerkleRoot: TestNet3GenesisMerkleRoot,
		Timestamp:  time.Unix(0x5eb6fb30, 0), 
		Nonce:      84208,
	},
	Transactions: []*wire.MsgTx{&test3netgenesisCoinbaseTx, &genesisInitPolygonTx},
}

var TestNet3GenesisMinerBlock = wire.MingingRightBlock{
	Version:    TestNet3GenesisBlock.Header.Version,
	PrevBlock:  chainhash.Hash{},
	BestBlock: TestNet3GenesisHash[0],
	Timestamp:  TestNet3GenesisBlock.Header.Timestamp, 
	Bits:      0x1f00ffff,
	Nonce:      4059,
	Miner: creator,
}

var SimNetGenesisHash = []chainhash.Hash{
chainhash.Hash{
		0x0a, 0x61, 0x82, 0x47, 0x36, 0x74, 0x18, 0x83, 
		0x90, 0x36, 0x14, 0xfe, 0xfa, 0xee, 0xef, 0x0b, 
		0x4e, 0xcb, 0x0d, 0x2d, 0x29, 0xe8, 0x83, 0xc4, 
		0x27, 0x90, 0xf0, 0x91, 0xf1, 0xe3, 0x0a, 0x00, 
	},
chainhash.Hash{
		0xdf, 0x6f, 0x3b, 0x22, 0xb4, 0x8b, 0xa6, 0x31, 
		0xcf, 0x50, 0x0c, 0xcb, 0xb2, 0x62, 0xcd, 0xd4, 
		0x64, 0x2b, 0x20, 0x56, 0xc6, 0x23, 0x23, 0x2d, 
		0x24, 0xcf, 0x90, 0x65, 0x15, 0x86, 0x32, 0x00, 
	},
}

var SimNetGenesisMerkleRoot = GenesisMerkleRoot

var simnetgenesisCoinbaseTx = genesisCoinbaseTx

var SimNetGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},
		MerkleRoot: SimNetGenesisMerkleRoot,
		Timestamp:  time.Unix(0x5eb6fb31, 0), 
		Nonce:      80,
	},
	Transactions: []*wire.MsgTx{&simnetgenesisCoinbaseTx, &genesisInitPolygonTx},
}

var SimNetGenesisMinerBlock = wire.MingingRightBlock{
	Version:    SimNetGenesisBlock.Header.Version,
	PrevBlock:  chainhash.Hash{},
	BestBlock: SimNetGenesisHash[0],
	Timestamp:  SimNetGenesisBlock.Header.Timestamp, 
	Bits:      0x1f7fffff,
	Nonce:      1201,
	Miner: creator,
}