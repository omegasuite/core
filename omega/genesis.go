// Copyright (c) 2019 The Omega developers
// Use of this source code is governed by an license that can
// be found in the LICENSE file.

package omega

import (
	"time"

	"github.com/btcsuite/btcd/chaincfg/chainhash"
//	"github.com/btcsuite/btcd/wire/common"
	"github.com/btcsuite/btcd/wire"
	"github.com/btcsuite/omega/token"
)

var IntlDateLine = [][2]float64 {	// international date line
	{ 90.0000, 180.0000, },
	{ 75.0000, 180.0000, },
	{ 67.7356, -169.2500, },
	{ 65.0189, -169.2500, },
	{ 52.6863, 170.0500, },
	{ 47.8353, 180.0000, },
	{ -0.9000, 180.0000, },
	{ -0.9000, -159.6500, },
	{ 2.9000, -159.6500, },
	{ 2.9000, -161.8500, },
	{ 5.0000, -161.8500, },
	{ 5.0000, -155.9500, },
	{ -7.8000, -150.6500, },
	{ -10.0000, -150.6500, },
	{ -10.0000, -156.0500, },
	{ -7.8000, -156.0500, },
	{ -7.80000, -178.0500, },
	{ -15.0000, -172.7500, },
	{ -45.0000, -172.7500, },
	{ -51.1815, 180.0000, },
	{ -90.0000, 180.0000, },
}

var InitDefs = []token.Definition{
	&token.VertexDef {
		Lat: 0x16800000,
		Lng: 0xd3000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x12c00000,
		Lng: 0xd3000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x10ef1412,
		Lng: 0xd5b00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x104135a8,
		Lng: 0xd5b00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xd2bec56,
		Lng: 0xd0833334,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xbf5758e,
		Lng: 0xd3000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xffc66667,
		Lng: 0xd3000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xffc66667,
		Lng: 0xd8166667,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xb99999,
		Lng: 0xd8166667,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xb99999,
		Lng: 0xd789999a,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x1400000,
		Lng: 0xd789999a,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x1400000,
		Lng: 0xd9033334,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfe0ccccd,
		Lng: 0xda566667,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfd800000,
		Lng: 0xda566667,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfd800000,
		Lng: 0xd8fccccd,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfe0ccccd,
		Lng: 0xd8fccccd,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfe0ccccd,
		Lng: 0xd37ccccd,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfc400000,
		Lng: 0xd4d00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xf4c00000,
		Lng: 0xd4d00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xf334624e,
		Lng: 0xd3000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xe9800000,
		Lng: 0xd3000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xe9800000,
		Lng: 0x2d000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xf334624e,
		Lng: 0x2d000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xf4c00000,
		Lng: 0x2ed00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfc400000,
		Lng: 0x2ed00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfe0ccccd,
		Lng: 0x2d7ccccc,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfe0ccccd,
		Lng: 0x32fccccc,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfd800000,
		Lng: 0x32fccccc,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfd800000,
		Lng: 0x34566666,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xfe0ccccd,
		Lng: 0x34566666,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x1400000,
		Lng: 0x33033333,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x1400000,
		Lng: 0x31899999,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xb99999,
		Lng: 0x31899999,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xb99999,
		Lng: 0x32166666,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xffc66667,
		Lng: 0x32166666,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xffc66667,
		Lng: 0x2d000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xbf5758e,
		Lng: 0x2d000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0xd2bec56,
		Lng: 0x2a833333,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x104135a8,
		Lng: 0x2fb00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x10ef1412,
		Lng: 0x2fb00000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x12c00000,
		Lng: 0x2d000000,
		Desc:[]byte{},
	},
	&token.VertexDef {
		Lat: 0x16800000,
		Lng: 0x2d000000,
		Desc:[]byte{},
	},
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xef, 0x47, 0x77, 0x39, 0xa7, 0x5b, 0x4b, 0xff,
			0x95, 0x54, 0x80, 0x2d, 0xdf, 0x34, 0xbe, 0xd1,
			0x2f, 0xe4, 0xfb, 0x18, 0xa6, 0x30, 0xa7, 0xca,
			0x0c, 0x56, 0x84, 0xb7, 0x42, 0x4d, 0xa2, 0x3e,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xd3, 0x2f, 0x8e, 0xae, 0x91, 0xa4, 0x15, 0x7d,
			0x67, 0x3a, 0x3e, 0x6a, 0x22, 0x67, 0x1e, 0xa2,
			0x79, 0x79, 0x9e, 0x2f, 0x02, 0x0a, 0x98, 0xc6,
			0x9b, 0xa0, 0xfc, 0x16, 0x39, 0x9d, 0xc3, 0x70,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xd3, 0x2f, 0x8e, 0xae, 0x91, 0xa4, 0x15, 0x7d,
			0x67, 0x3a, 0x3e, 0x6a, 0x22, 0x67, 0x1e, 0xa2,
			0x79, 0x79, 0x9e, 0x2f, 0x02, 0x0a, 0x98, 0xc6,
			0x9b, 0xa0, 0xfc, 0x16, 0x39, 0x9d, 0xc3, 0x70,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x15, 0x4b, 0xee, 0x3e, 0xa2, 0x33, 0xfd, 0x38,
			0x04, 0x3d, 0x07, 0xf8, 0x4b, 0x95, 0xb4, 0x7c,
			0x04, 0xfe, 0xc5, 0x8e, 0xef, 0x25, 0x5f, 0x25,
			0x10, 0x92, 0x51, 0x30, 0xb8, 0x5c, 0xab, 0x60,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x15, 0x4b, 0xee, 0x3e, 0xa2, 0x33, 0xfd, 0x38,
			0x04, 0x3d, 0x07, 0xf8, 0x4b, 0x95, 0xb4, 0x7c,
			0x04, 0xfe, 0xc5, 0x8e, 0xef, 0x25, 0x5f, 0x25,
			0x10, 0x92, 0x51, 0x30, 0xb8, 0x5c, 0xab, 0x60,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x60, 0x90, 0xbf, 0x11, 0xeb, 0x17, 0xf9, 0xad,
			0x13, 0xfe, 0xb4, 0x3a, 0x16, 0x85, 0x40, 0xb5,
			0x81, 0x1e, 0x32, 0x5b, 0x36, 0xc8, 0xfd, 0x3c,
			0x7a, 0xf4, 0x40, 0xb3, 0x2c, 0x2c, 0x33, 0xb9,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash{},
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x60, 0x90, 0xbf, 0x11, 0xeb, 0x17, 0xf9, 0xad,
			0x13, 0xfe, 0xb4, 0x3a, 0x16, 0x85, 0x40, 0xb5,
			0x81, 0x1e, 0x32, 0x5b, 0x36, 0xc8, 0xfd, 0x3c,
			0x7a, 0xf4, 0x40, 0xb3, 0x2c, 0x2c, 0x33, 0xb9,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xef, 0x47, 0x77, 0x39, 0xa7, 0x5b, 0x4b, 0xff,
			0x95, 0x54, 0x80, 0x2d, 0xdf, 0x34, 0xbe, 0xd1,
			0x2f, 0xe4, 0xfb, 0x18, 0xa6, 0x30, 0xa7, 0xca,
			0x0c, 0x56, 0x84, 0xb7, 0x42, 0x4d, 0xa2, 0x3e,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xef, 0x47, 0x77, 0x39, 0xa7, 0x5b, 0x4b, 0xff,
			0x95, 0x54, 0x80, 0x2d, 0xdf, 0x34, 0xbe, 0xd1,
			0x2f, 0xe4, 0xfb, 0x18, 0xa6, 0x30, 0xa7, 0xca,
			0x0c, 0x56, 0x84, 0xb7, 0x42, 0x4d, 0xa2, 0x3e,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x62, 0x68, 0x07, 0xdb, 0x98, 0x54, 0x54, 0x36,
			0x42, 0xc7, 0xa8, 0x61, 0x29, 0x06, 0xfe, 0xad,
			0x09, 0x99, 0xa3, 0x85, 0xfd, 0xe9, 0xa5, 0xb6,
			0x26, 0x8d, 0xac, 0xf3, 0x7d, 0x15, 0x3d, 0x36,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x15, 0x4b, 0xee, 0x3e, 0xa2, 0x33, 0xfd, 0x38,
			0x04, 0x3d, 0x07, 0xf8, 0x4b, 0x95, 0xb4, 0x7c,
			0x04, 0xfe, 0xc5, 0x8e, 0xef, 0x25, 0x5f, 0x25,
			0x10, 0x92, 0x51, 0x30, 0xb8, 0x5c, 0xab, 0x60,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x59, 0xa4, 0xfe, 0xe2, 0x39, 0x77, 0x87, 0xfa,
			0x2a, 0xdf, 0x88, 0x1b, 0x1c, 0xdb, 0x01, 0x33,
			0x19, 0x75, 0xa1, 0x9d, 0xe8, 0x09, 0x80, 0x2d,
			0x30, 0x6f, 0x37, 0x3b, 0x5b, 0x62, 0x94, 0x87,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x62, 0x68, 0x07, 0xdb, 0x98, 0x54, 0x54, 0x36,
			0x42, 0xc7, 0xa8, 0x61, 0x29, 0x06, 0xfe, 0xad,
			0x09, 0x99, 0xa3, 0x85, 0xfd, 0xe9, 0xa5, 0xb6,
			0x26, 0x8d, 0xac, 0xf3, 0x7d, 0x15, 0x3d, 0x36,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x4b, 0x91, 0x7b, 0xb4, 0x50, 0x7e, 0xc0, 0x51,
			0x9b, 0x36, 0x25, 0xe3, 0x0a, 0xf2, 0xd2, 0xef,
			0x73, 0xea, 0x03, 0x34, 0x19, 0x3e, 0x72, 0x81,
			0x3b, 0x9a, 0x90, 0x1b, 0x70, 0x76, 0x66, 0x9c,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x59, 0xa4, 0xfe, 0xe2, 0x39, 0x77, 0x87, 0xfa,
			0x2a, 0xdf, 0x88, 0x1b, 0x1c, 0xdb, 0x01, 0x33,
			0x19, 0x75, 0xa1, 0x9d, 0xe8, 0x09, 0x80, 0x2d,
			0x30, 0x6f, 0x37, 0x3b, 0x5b, 0x62, 0x94, 0x87,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x11, 0x09, 0x83, 0x80, 0x75, 0xd6, 0x05, 0x40,
			0xf7, 0x23, 0xfb, 0xd7, 0x91, 0x4a, 0xf0, 0x4d,
			0xbf, 0xbf, 0x07, 0x08, 0x4d, 0xc5, 0xe6, 0xad,
			0x4b, 0x77, 0xd4, 0x31, 0x3d, 0xd1, 0xbe, 0x26,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x4b, 0x91, 0x7b, 0xb4, 0x50, 0x7e, 0xc0, 0x51,
			0x9b, 0x36, 0x25, 0xe3, 0x0a, 0xf2, 0xd2, 0xef,
			0x73, 0xea, 0x03, 0x34, 0x19, 0x3e, 0x72, 0x81,
			0x3b, 0x9a, 0x90, 0x1b, 0x70, 0x76, 0x66, 0x9c,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x14, 0x53, 0xb8, 0x96, 0x28, 0xb3, 0xa5, 0x87,
			0xfe, 0xcc, 0xb8, 0xf9, 0x80, 0x76, 0x3b, 0xc0,
			0x08, 0x31, 0x5b, 0x80, 0x5b, 0x9f, 0x22, 0x6e,
			0x73, 0x45, 0x6a, 0x01, 0x23, 0x98, 0xce, 0x18,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x11, 0x09, 0x83, 0x80, 0x75, 0xd6, 0x05, 0x40,
			0xf7, 0x23, 0xfb, 0xd7, 0x91, 0x4a, 0xf0, 0x4d,
			0xbf, 0xbf, 0x07, 0x08, 0x4d, 0xc5, 0xe6, 0xad,
			0x4b, 0x77, 0xd4, 0x31, 0x3d, 0xd1, 0xbe, 0x26,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xa7, 0x07, 0x82, 0x52, 0x6f, 0x23, 0x66, 0x9c,
			0xd5, 0x2d, 0x51, 0xb6, 0xd1, 0x33, 0xbb, 0xee,
			0x54, 0x84, 0x1b, 0xd8, 0x27, 0x06, 0x6e, 0xf9,
			0x30, 0x8a, 0xd3, 0x41, 0x60, 0x93, 0x45, 0xb3,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x14, 0x53, 0xb8, 0x96, 0x28, 0xb3, 0xa5, 0x87,
			0xfe, 0xcc, 0xb8, 0xf9, 0x80, 0x76, 0x3b, 0xc0,
			0x08, 0x31, 0x5b, 0x80, 0x5b, 0x9f, 0x22, 0x6e,
			0x73, 0x45, 0x6a, 0x01, 0x23, 0x98, 0xce, 0x18,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x2f, 0x52, 0x29, 0x7b, 0xa4, 0x43, 0x32, 0xb9,
			0x4c, 0xf3, 0x62, 0x76, 0xcc, 0x47, 0xe8, 0x7c,
			0x49, 0x10, 0x34, 0x72, 0xbe, 0xf3, 0x37, 0x6f,
			0x86, 0xf8, 0x66, 0x6d, 0xa7, 0x98, 0xef, 0xd1,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xa7, 0x07, 0x82, 0x52, 0x6f, 0x23, 0x66, 0x9c,
			0xd5, 0x2d, 0x51, 0xb6, 0xd1, 0x33, 0xbb, 0xee,
			0x54, 0x84, 0x1b, 0xd8, 0x27, 0x06, 0x6e, 0xf9,
			0x30, 0x8a, 0xd3, 0x41, 0x60, 0x93, 0x45, 0xb3,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xc0, 0xb3, 0x6b, 0x14, 0xe5, 0x42, 0x32, 0x96,
			0x54, 0x50, 0x0f, 0x22, 0xcf, 0x82, 0x49, 0x29,
			0x32, 0xc8, 0xfa, 0xb8, 0xbe, 0x74, 0x18, 0x8d,
			0xe8, 0xba, 0x70, 0x85, 0x7d, 0xca, 0xc1, 0x15,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x2f, 0x52, 0x29, 0x7b, 0xa4, 0x43, 0x32, 0xb9,
			0x4c, 0xf3, 0x62, 0x76, 0xcc, 0x47, 0xe8, 0x7c,
			0x49, 0x10, 0x34, 0x72, 0xbe, 0xf3, 0x37, 0x6f,
			0x86, 0xf8, 0x66, 0x6d, 0xa7, 0x98, 0xef, 0xd1,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x05, 0xbd, 0x78, 0x9c, 0x1a, 0xd2, 0x00, 0x37,
			0x91, 0x72, 0x9f, 0x3b, 0x44, 0x78, 0xf8, 0x27,
			0x91, 0xbf, 0x3f, 0x74, 0xf4, 0xaf, 0x3a, 0x67,
			0x18, 0x44, 0xc1, 0x6a, 0x89, 0xb9, 0xfd, 0xcb,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xc0, 0xb3, 0x6b, 0x14, 0xe5, 0x42, 0x32, 0x96,
			0x54, 0x50, 0x0f, 0x22, 0xcf, 0x82, 0x49, 0x29,
			0x32, 0xc8, 0xfa, 0xb8, 0xbe, 0x74, 0x18, 0x8d,
			0xe8, 0xba, 0x70, 0x85, 0x7d, 0xca, 0xc1, 0x15,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xed, 0x68, 0x70, 0xb2, 0x11, 0x40, 0x50, 0x0e,
			0x13, 0x83, 0x72, 0xd5, 0x8d, 0xd7, 0xbd, 0xa9,
			0x21, 0xef, 0xe3, 0x0a, 0x11, 0x0e, 0x8e, 0xfa,
			0xd9, 0xa9, 0x26, 0xdb, 0x05, 0xc2, 0x87, 0x03,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x05, 0xbd, 0x78, 0x9c, 0x1a, 0xd2, 0x00, 0x37,
			0x91, 0x72, 0x9f, 0x3b, 0x44, 0x78, 0xf8, 0x27,
			0x91, 0xbf, 0x3f, 0x74, 0xf4, 0xaf, 0x3a, 0x67,
			0x18, 0x44, 0xc1, 0x6a, 0x89, 0xb9, 0xfd, 0xcb,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x46, 0x65, 0x60, 0x90, 0x75, 0xd7, 0x46, 0xb9,
			0xa0, 0x48, 0x8a, 0xec, 0xaa, 0x2e, 0x88, 0x9e,
			0xcc, 0x09, 0x51, 0xd8, 0xb1, 0x06, 0x2d, 0x77,
			0xb8, 0xa6, 0x58, 0xfb, 0x84, 0xee, 0x58, 0x8e,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xed, 0x68, 0x70, 0xb2, 0x11, 0x40, 0x50, 0x0e,
			0x13, 0x83, 0x72, 0xd5, 0x8d, 0xd7, 0xbd, 0xa9,
			0x21, 0xef, 0xe3, 0x0a, 0x11, 0x0e, 0x8e, 0xfa,
			0xd9, 0xa9, 0x26, 0xdb, 0x05, 0xc2, 0x87, 0x03,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x92, 0x3d, 0x2f, 0x3a, 0xdd, 0xf5, 0x1c, 0x3a,
			0x0a, 0x3f, 0xa0, 0x73, 0x98, 0x99, 0xce, 0xf6,
			0x60, 0xa0, 0xd4, 0xbd, 0x2a, 0xed, 0xf5, 0xe1,
			0x0d, 0xe6, 0x0a, 0xcf, 0xa1, 0xa8, 0x75, 0x04,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x46, 0x65, 0x60, 0x90, 0x75, 0xd7, 0x46, 0xb9,
			0xa0, 0x48, 0x8a, 0xec, 0xaa, 0x2e, 0x88, 0x9e,
			0xcc, 0x09, 0x51, 0xd8, 0xb1, 0x06, 0x2d, 0x77,
			0xb8, 0xa6, 0x58, 0xfb, 0x84, 0xee, 0x58, 0x8e,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x72, 0xe6, 0xe8, 0xb4, 0xb2, 0xa2, 0x33, 0xdc,
			0x2e, 0xdd, 0x70, 0xff, 0x28, 0x16, 0xd5, 0xff,
			0x97, 0xd7, 0xa9, 0xff, 0xbf, 0xdc, 0x0c, 0x8e,
			0x60, 0x98, 0x09, 0x2f, 0x78, 0xe1, 0x9f, 0xbe,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x92, 0x3d, 0x2f, 0x3a, 0xdd, 0xf5, 0x1c, 0x3a,
			0x0a, 0x3f, 0xa0, 0x73, 0x98, 0x99, 0xce, 0xf6,
			0x60, 0xa0, 0xd4, 0xbd, 0x2a, 0xed, 0xf5, 0xe1,
			0x0d, 0xe6, 0x0a, 0xcf, 0xa1, 0xa8, 0x75, 0x04,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xfd, 0x5a, 0x62, 0x58, 0xe9, 0xcd, 0x4d, 0x24,
			0x5c, 0xbc, 0xc8, 0x19, 0x73, 0xe3, 0x18, 0x77,
			0x93, 0x01, 0x11, 0xf3, 0x70, 0x1a, 0x60, 0xe3,
			0xe7, 0x8d, 0xce, 0x3e, 0x75, 0x48, 0x8c, 0x90,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x72, 0xe6, 0xe8, 0xb4, 0xb2, 0xa2, 0x33, 0xdc,
			0x2e, 0xdd, 0x70, 0xff, 0x28, 0x16, 0xd5, 0xff,
			0x97, 0xd7, 0xa9, 0xff, 0xbf, 0xdc, 0x0c, 0x8e,
			0x60, 0x98, 0x09, 0x2f, 0x78, 0xe1, 0x9f, 0xbe,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xfc, 0xc2, 0x04, 0x6b, 0x04, 0x27, 0x09, 0xf1,
			0xa7, 0x0b, 0xb9, 0x0a, 0xd7, 0x62, 0x27, 0x98,
			0x1c, 0xfd, 0xb5, 0x1c, 0x16, 0x7e, 0xa2, 0x5b,
			0x5c, 0xfe, 0xa5, 0x27, 0xc4, 0xcf, 0x56, 0x2c,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xfd, 0x5a, 0x62, 0x58, 0xe9, 0xcd, 0x4d, 0x24,
			0x5c, 0xbc, 0xc8, 0x19, 0x73, 0xe3, 0x18, 0x77,
			0x93, 0x01, 0x11, 0xf3, 0x70, 0x1a, 0x60, 0xe3,
			0xe7, 0x8d, 0xce, 0x3e, 0x75, 0x48, 0x8c, 0x90,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x06, 0x96, 0xe1, 0x65, 0x7a, 0xe1, 0x32, 0x2a,
			0xd7, 0x38, 0x11, 0x33, 0x8d, 0xb9, 0xe1, 0xc1,
			0x64, 0x56, 0x23, 0x30, 0x04, 0xa7, 0xf4, 0x02,
			0x4f, 0x15, 0x4e, 0xf1, 0x4b, 0x68, 0xa8, 0x69,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xfc, 0xc2, 0x04, 0x6b, 0x04, 0x27, 0x09, 0xf1,
			0xa7, 0x0b, 0xb9, 0x0a, 0xd7, 0x62, 0x27, 0x98,
			0x1c, 0xfd, 0xb5, 0x1c, 0x16, 0x7e, 0xa2, 0x5b,
			0x5c, 0xfe, 0xa5, 0x27, 0xc4, 0xcf, 0x56, 0x2c,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x3a, 0xb7, 0xdd, 0x01, 0xbb, 0x14, 0xbf, 0x6c,
			0x0c, 0x0f, 0xbe, 0xd4, 0x30, 0x5d, 0x41, 0x99,
			0x24, 0xfc, 0x5a, 0x92, 0x6b, 0x9f, 0x17, 0xbe,
			0x51, 0x3b, 0x32, 0xdf, 0xa7, 0x84, 0x73, 0x5b,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x06, 0x96, 0xe1, 0x65, 0x7a, 0xe1, 0x32, 0x2a,
			0xd7, 0x38, 0x11, 0x33, 0x8d, 0xb9, 0xe1, 0xc1,
			0x64, 0x56, 0x23, 0x30, 0x04, 0xa7, 0xf4, 0x02,
			0x4f, 0x15, 0x4e, 0xf1, 0x4b, 0x68, 0xa8, 0x69,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x61, 0x70, 0xed, 0x51, 0xbc, 0x91, 0x19, 0x95,
			0xdc, 0xd7, 0x7c, 0x20, 0x54, 0x86, 0xb6, 0x1d,
			0xb4, 0x0e, 0x26, 0xf1, 0x68, 0x09, 0x2d, 0x63,
			0xcb, 0x88, 0x0f, 0xbf, 0x0c, 0x1e, 0x9f, 0x9b,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x3a, 0xb7, 0xdd, 0x01, 0xbb, 0x14, 0xbf, 0x6c,
			0x0c, 0x0f, 0xbe, 0xd4, 0x30, 0x5d, 0x41, 0x99,
			0x24, 0xfc, 0x5a, 0x92, 0x6b, 0x9f, 0x17, 0xbe,
			0x51, 0x3b, 0x32, 0xdf, 0xa7, 0x84, 0x73, 0x5b,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xb1, 0x9d, 0x23, 0xda, 0x85, 0x87, 0x0e, 0x4f,
			0xf3, 0x97, 0x95, 0x45, 0x4e, 0x44, 0x60, 0x72,
			0x93, 0x2a, 0xd3, 0xd0, 0x17, 0x0d, 0xf8, 0xc6,
			0x3f, 0x9b, 0xdd, 0x39, 0xaa, 0x87, 0xb5, 0xe6,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x61, 0x70, 0xed, 0x51, 0xbc, 0x91, 0x19, 0x95,
			0xdc, 0xd7, 0x7c, 0x20, 0x54, 0x86, 0xb6, 0x1d,
			0xb4, 0x0e, 0x26, 0xf1, 0x68, 0x09, 0x2d, 0x63,
			0xcb, 0x88, 0x0f, 0xbf, 0x0c, 0x1e, 0x9f, 0x9b,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x7b, 0x26, 0x87, 0xa2, 0x7e, 0xc3, 0xcb, 0x8f,
			0xfd, 0xd9, 0xb4, 0xc8, 0x4d, 0x6d, 0xb1, 0xe8,
			0x66, 0xf8, 0x76, 0x67, 0x9e, 0x94, 0x8a, 0xea,
			0x0f, 0x93, 0xa9, 0x8a, 0x09, 0x16, 0xd4, 0x80,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xb1, 0x9d, 0x23, 0xda, 0x85, 0x87, 0x0e, 0x4f,
			0xf3, 0x97, 0x95, 0x45, 0x4e, 0x44, 0x60, 0x72,
			0x93, 0x2a, 0xd3, 0xd0, 0x17, 0x0d, 0xf8, 0xc6,
			0x3f, 0x9b, 0xdd, 0x39, 0xaa, 0x87, 0xb5, 0xe6,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x03, 0x96, 0x51, 0x9b, 0xcb, 0x3d, 0x6a, 0xba,
			0x86, 0x9f, 0x67, 0x6e, 0xff, 0x83, 0x68, 0xcb,
			0x7a, 0x17, 0x47, 0xc3, 0x74, 0x42, 0xda, 0xff,
			0xbf, 0xc4, 0xec, 0x8f, 0xc6, 0xcd, 0x11, 0xe9,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x7b, 0x26, 0x87, 0xa2, 0x7e, 0xc3, 0xcb, 0x8f,
			0xfd, 0xd9, 0xb4, 0xc8, 0x4d, 0x6d, 0xb1, 0xe8,
			0x66, 0xf8, 0x76, 0x67, 0x9e, 0x94, 0x8a, 0xea,
			0x0f, 0x93, 0xa9, 0x8a, 0x09, 0x16, 0xd4, 0x80,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x62, 0x34, 0x9a, 0x90, 0x43, 0xca, 0x61, 0x26,
			0x26, 0xca, 0xae, 0x7c, 0x7f, 0x9c, 0x66, 0xb2,
			0x48, 0x5f, 0x33, 0xe6, 0xee, 0x5f, 0x50, 0x5c,
			0x4a, 0x8b, 0x07, 0x11, 0x32, 0xb3, 0x5b, 0xa5,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x03, 0x96, 0x51, 0x9b, 0xcb, 0x3d, 0x6a, 0xba,
			0x86, 0x9f, 0x67, 0x6e, 0xff, 0x83, 0x68, 0xcb,
			0x7a, 0x17, 0x47, 0xc3, 0x74, 0x42, 0xda, 0xff,
			0xbf, 0xc4, 0xec, 0x8f, 0xc6, 0xcd, 0x11, 0xe9,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x5f, 0x66, 0x84, 0x61, 0xa7, 0xa3, 0x4a, 0x48,
			0x3f, 0xb8, 0x74, 0x10, 0xc9, 0xab, 0x3f, 0x7b,
			0xb2, 0x4c, 0x45, 0x8b, 0xd8, 0x87, 0x72, 0x37,
			0x5f, 0x77, 0xb4, 0xc8, 0xbd, 0x21, 0x9e, 0x1e,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x62, 0x34, 0x9a, 0x90, 0x43, 0xca, 0x61, 0x26,
			0x26, 0xca, 0xae, 0x7c, 0x7f, 0x9c, 0x66, 0xb2,
			0x48, 0x5f, 0x33, 0xe6, 0xee, 0x5f, 0x50, 0x5c,
			0x4a, 0x8b, 0x07, 0x11, 0x32, 0xb3, 0x5b, 0xa5,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x37, 0xd9, 0x59, 0xdb, 0x1e, 0xf8, 0x5d, 0xac,
			0x15, 0xbc, 0x8e, 0x0f, 0xc7, 0x23, 0x45, 0xff,
			0xcc, 0x2a, 0xdf, 0x48, 0xe4, 0xee, 0x3e, 0x76,
			0x9c, 0x65, 0x1a, 0x4a, 0x71, 0x98, 0xb8, 0xca,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x5f, 0x66, 0x84, 0x61, 0xa7, 0xa3, 0x4a, 0x48,
			0x3f, 0xb8, 0x74, 0x10, 0xc9, 0xab, 0x3f, 0x7b,
			0xb2, 0x4c, 0x45, 0x8b, 0xd8, 0x87, 0x72, 0x37,
			0x5f, 0x77, 0xb4, 0xc8, 0xbd, 0x21, 0x9e, 0x1e,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x63, 0x80, 0x1a, 0x11, 0x7d, 0xfc, 0x09, 0x0d,
			0x27, 0x23, 0xcc, 0x89, 0xbc, 0x66, 0xe1, 0x1e,
			0xe4, 0x21, 0xc6, 0xa3, 0x19, 0xc1, 0x45, 0x9e,
			0xc0, 0x76, 0x31, 0xb1, 0x3b, 0x7a, 0xdf, 0x15,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x37, 0xd9, 0x59, 0xdb, 0x1e, 0xf8, 0x5d, 0xac,
			0x15, 0xbc, 0x8e, 0x0f, 0xc7, 0x23, 0x45, 0xff,
			0xcc, 0x2a, 0xdf, 0x48, 0xe4, 0xee, 0x3e, 0x76,
			0x9c, 0x65, 0x1a, 0x4a, 0x71, 0x98, 0xb8, 0xca,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x78, 0xd3, 0xfa, 0x8c, 0xfa, 0x03, 0x86, 0x86,
			0x14, 0x69, 0xad, 0x42, 0xb3, 0x67, 0xb9, 0x98,
			0x7a, 0x18, 0x55, 0xce, 0xb4, 0x94, 0x05, 0x2d,
			0x33, 0x85, 0x12, 0xe6, 0xd8, 0x62, 0xed, 0x24,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x63, 0x80, 0x1a, 0x11, 0x7d, 0xfc, 0x09, 0x0d,
			0x27, 0x23, 0xcc, 0x89, 0xbc, 0x66, 0xe1, 0x1e,
			0xe4, 0x21, 0xc6, 0xa3, 0x19, 0xc1, 0x45, 0x9e,
			0xc0, 0x76, 0x31, 0xb1, 0x3b, 0x7a, 0xdf, 0x15,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x33, 0x26, 0x8f, 0xaa, 0x08, 0x7a, 0xf1, 0x4b,
			0x2c, 0x5c, 0x0b, 0xc2, 0xb0, 0xc9, 0xd0, 0x52,
			0x1d, 0x26, 0x00, 0x8f, 0x1b, 0x0c, 0x38, 0x47,
			0xc7, 0xfe, 0xe5, 0x21, 0x50, 0x61, 0xc9, 0xeb,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x78, 0xd3, 0xfa, 0x8c, 0xfa, 0x03, 0x86, 0x86,
			0x14, 0x69, 0xad, 0x42, 0xb3, 0x67, 0xb9, 0x98,
			0x7a, 0x18, 0x55, 0xce, 0xb4, 0x94, 0x05, 0x2d,
			0x33, 0x85, 0x12, 0xe6, 0xd8, 0x62, 0xed, 0x24,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x0b, 0xb2, 0x40, 0x41, 0x03, 0xe3, 0x4b, 0xd4,
			0x87, 0xcb, 0xf8, 0xe8, 0xae, 0x21, 0xb5, 0x00,
			0xec, 0xb4, 0x64, 0x6e, 0x4f, 0x19, 0x84, 0x9a,
			0x68, 0xc4, 0x97, 0x56, 0x54, 0x3f, 0x1b, 0x4e,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x33, 0x26, 0x8f, 0xaa, 0x08, 0x7a, 0xf1, 0x4b,
			0x2c, 0x5c, 0x0b, 0xc2, 0xb0, 0xc9, 0xd0, 0x52,
			0x1d, 0x26, 0x00, 0x8f, 0x1b, 0x0c, 0x38, 0x47,
			0xc7, 0xfe, 0xe5, 0x21, 0x50, 0x61, 0xc9, 0xeb,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x4c, 0x56, 0xc9, 0x5b, 0x67, 0xb1, 0x43, 0x85,
			0x20, 0xbf, 0xe6, 0x9f, 0x97, 0x07, 0x80, 0x8d,
			0x6c, 0xd1, 0x58, 0xd7, 0x0a, 0xa0, 0x99, 0xbe,
			0x39, 0xbf, 0xef, 0xee, 0x70, 0xb8, 0xbe, 0x74,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x0b, 0xb2, 0x40, 0x41, 0x03, 0xe3, 0x4b, 0xd4,
			0x87, 0xcb, 0xf8, 0xe8, 0xae, 0x21, 0xb5, 0x00,
			0xec, 0xb4, 0x64, 0x6e, 0x4f, 0x19, 0x84, 0x9a,
			0x68, 0xc4, 0x97, 0x56, 0x54, 0x3f, 0x1b, 0x4e,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xfb, 0xf0, 0xf6, 0xfe, 0xb5, 0x53, 0x44, 0xd8,
			0x33, 0xe5, 0x97, 0xf7, 0x53, 0xc6, 0xdf, 0x41,
			0x2e, 0x9d, 0xbf, 0x33, 0xa4, 0x62, 0x1e, 0x0d,
			0x5a, 0x52, 0x2e, 0xde, 0xa4, 0x58, 0x88, 0x09,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x4c, 0x56, 0xc9, 0x5b, 0x67, 0xb1, 0x43, 0x85,
			0x20, 0xbf, 0xe6, 0x9f, 0x97, 0x07, 0x80, 0x8d,
			0x6c, 0xd1, 0x58, 0xd7, 0x0a, 0xa0, 0x99, 0xbe,
			0x39, 0xbf, 0xef, 0xee, 0x70, 0xb8, 0xbe, 0x74,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xbd, 0x21, 0x5e, 0x72, 0xf2, 0x42, 0x27, 0x8b,
			0x18, 0x93, 0x11, 0xbc, 0x20, 0x8c, 0x21, 0xa1,
			0x6b, 0x48, 0x4d, 0xd1, 0xe6, 0x16, 0x87, 0x17,
			0x74, 0x75, 0xfb, 0x68, 0xdf, 0x94, 0x9b, 0xdf,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xfb, 0xf0, 0xf6, 0xfe, 0xb5, 0x53, 0x44, 0xd8,
			0x33, 0xe5, 0x97, 0xf7, 0x53, 0xc6, 0xdf, 0x41,
			0x2e, 0x9d, 0xbf, 0x33, 0xa4, 0x62, 0x1e, 0x0d,
			0x5a, 0x52, 0x2e, 0xde, 0xa4, 0x58, 0x88, 0x09,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x4b, 0x8d, 0x55, 0x42, 0xae, 0x1f, 0x2c, 0xcb,
			0x9f, 0x56, 0x99, 0xb2, 0x1b, 0xae, 0xb3, 0x30,
			0x57, 0xd6, 0x01, 0x78, 0xa3, 0xe2, 0x3b, 0xe2,
			0x10, 0x14, 0x41, 0x0e, 0x3d, 0x02, 0xd5, 0x97,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xbd, 0x21, 0x5e, 0x72, 0xf2, 0x42, 0x27, 0x8b,
			0x18, 0x93, 0x11, 0xbc, 0x20, 0x8c, 0x21, 0xa1,
			0x6b, 0x48, 0x4d, 0xd1, 0xe6, 0x16, 0x87, 0x17,
			0x74, 0x75, 0xfb, 0x68, 0xdf, 0x94, 0x9b, 0xdf,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x51, 0x27, 0x37, 0xf9, 0x4e, 0xe3, 0x9d, 0xb2,
			0x00, 0x4e, 0xdd, 0xa4, 0x4c, 0x13, 0x22, 0x68,
			0x06, 0x4c, 0x58, 0xce, 0xe5, 0xd9, 0x1d, 0x3b,
			0x7c, 0x50, 0x73, 0xc2, 0x98, 0x6a, 0xc6, 0x06,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x4b, 0x8d, 0x55, 0x42, 0xae, 0x1f, 0x2c, 0xcb,
			0x9f, 0x56, 0x99, 0xb2, 0x1b, 0xae, 0xb3, 0x30,
			0x57, 0xd6, 0x01, 0x78, 0xa3, 0xe2, 0x3b, 0xe2,
			0x10, 0x14, 0x41, 0x0e, 0x3d, 0x02, 0xd5, 0x97,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x54, 0x16, 0xb7, 0x88, 0x0d, 0xbf, 0x9b, 0xca,
			0x80, 0x02, 0x54, 0x8d, 0x79, 0x73, 0x01, 0x16,
			0x73, 0xfe, 0x67, 0xb1, 0xdb, 0x7c, 0x1d, 0x82,
			0xbb, 0x24, 0x33, 0xcc, 0x8d, 0xc0, 0x50, 0x2c,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x51, 0x27, 0x37, 0xf9, 0x4e, 0xe3, 0x9d, 0xb2,
			0x00, 0x4e, 0xdd, 0xa4, 0x4c, 0x13, 0x22, 0x68,
			0x06, 0x4c, 0x58, 0xce, 0xe5, 0xd9, 0x1d, 0x3b,
			0x7c, 0x50, 0x73, 0xc2, 0x98, 0x6a, 0xc6, 0x06,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x49, 0x9e, 0x44, 0x5e, 0x1a, 0xf4, 0x46, 0xbb,
			0x15, 0xc2, 0xd3, 0x29, 0xc3, 0xd8, 0xc3, 0xd7,
			0xba, 0xa8, 0x09, 0x68, 0x9c, 0x2b, 0x76, 0xc8,
			0x89, 0x90, 0x0a, 0x57, 0xea, 0x9e, 0x5e, 0xb5,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x54, 0x16, 0xb7, 0x88, 0x0d, 0xbf, 0x9b, 0xca,
			0x80, 0x02, 0x54, 0x8d, 0x79, 0x73, 0x01, 0x16,
			0x73, 0xfe, 0x67, 0xb1, 0xdb, 0x7c, 0x1d, 0x82,
			0xbb, 0x24, 0x33, 0xcc, 0x8d, 0xc0, 0x50, 0x2c,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xe4, 0x89, 0x6a, 0x1a, 0xbf, 0x7b, 0xbd, 0x5c,
			0x65, 0x49, 0xce, 0x31, 0x74, 0x8d, 0x5d, 0x21,
			0xe8, 0x35, 0xe6, 0xfc, 0x32, 0x30, 0x99, 0x35,
			0x37, 0x96, 0xe1, 0x45, 0xd9, 0x38, 0xc2, 0x00,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x49, 0x9e, 0x44, 0x5e, 0x1a, 0xf4, 0x46, 0xbb,
			0x15, 0xc2, 0xd3, 0x29, 0xc3, 0xd8, 0xc3, 0xd7,
			0xba, 0xa8, 0x09, 0x68, 0x9c, 0x2b, 0x76, 0xc8,
			0x89, 0x90, 0x0a, 0x57, 0xea, 0x9e, 0x5e, 0xb5,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x8b, 0x09, 0x1f, 0x7c, 0x93, 0xca, 0xb2, 0x26,
			0x28, 0x40, 0xa1, 0x41, 0xeb, 0x32, 0x24, 0xbc,
			0x19, 0xb6, 0xae, 0x1b, 0x56, 0x8e, 0x6d, 0x76,
			0x1c, 0x7e, 0x64, 0xab, 0xc1, 0x08, 0x96, 0xad,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xe4, 0x89, 0x6a, 0x1a, 0xbf, 0x7b, 0xbd, 0x5c,
			0x65, 0x49, 0xce, 0x31, 0x74, 0x8d, 0x5d, 0x21,
			0xe8, 0x35, 0xe6, 0xfc, 0x32, 0x30, 0x99, 0x35,
			0x37, 0x96, 0xe1, 0x45, 0xd9, 0x38, 0xc2, 0x00,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xb6, 0x75, 0xe7, 0x67, 0x01, 0x06, 0x22, 0x90,
			0x94, 0xba, 0x0e, 0xf1, 0x57, 0xdc, 0x2d, 0x87,
			0xdd, 0x31, 0xdc, 0x05, 0x2a, 0xec, 0x89, 0x27,
			0xdd, 0x03, 0x67, 0x19, 0xe4, 0xca, 0x9b, 0x51,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0x8b, 0x09, 0x1f, 0x7c, 0x93, 0xca, 0xb2, 0x26,
			0x28, 0x40, 0xa1, 0x41, 0xeb, 0x32, 0x24, 0xbc,
			0x19, 0xb6, 0xae, 0x1b, 0x56, 0x8e, 0x6d, 0x76,
			0x1c, 0x7e, 0x64, 0xab, 0xc1, 0x08, 0x96, 0xad,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0xd3, 0x2f, 0x8e, 0xae, 0x91, 0xa4, 0x15, 0x7d,
			0x67, 0x3a, 0x3e, 0x6a, 0x22, 0x67, 0x1e, 0xa2,
			0x79, 0x79, 0x9e, 0x2f, 0x02, 0x0a, 0x98, 0xc6,
			0x9b, 0xa0, 0xfc, 0x16, 0x39, 0x9d, 0xc3, 0x70,
		}),
	},
	&token.BorderDef {
		Father: chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),
		Begin: chainhash.Hash([chainhash.HashSize]byte{
			0xb6, 0x75, 0xe7, 0x67, 0x01, 0x06, 0x22, 0x90,
			0x94, 0xba, 0x0e, 0xf1, 0x57, 0xdc, 0x2d, 0x87,
			0xdd, 0x31, 0xdc, 0x05, 0x2a, 0xec, 0x89, 0x27,
			0xdd, 0x03, 0x67, 0x19, 0xe4, 0xca, 0x9b, 0x51,
		}),
		End: chainhash.Hash([chainhash.HashSize]byte{
			0x60, 0x90, 0xbf, 0x11, 0xeb, 0x17, 0xf9, 0xad,
			0x13, 0xfe, 0xb4, 0x3a, 0x16, 0x85, 0x40, 0xb5,
			0x81, 0x1e, 0x32, 0x5b, 0x36, 0xc8, 0xfd, 0x3c,
			0x7a, 0xf4, 0x40, 0xb3, 0x2c, 0x2c, 0x33, 0xb9,
		}),
	},
	&token.PolygonDef {	Loops: []token.LoopDef{{	// Loop 0:
		chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),chainhash.Hash([chainhash.HashSize]byte{
			0xc0, 0x19, 0xbe, 0xbe, 0xfe, 0x60, 0x80, 0xa6,
			0xb5, 0x91, 0x5f, 0x6c, 0x8b, 0xb8, 0xb1, 0xcf,
			0x15, 0x1a, 0x38, 0xe0, 0xcb, 0x85, 0x98, 0xda,
			0xcc, 0xfc, 0x91, 0xf3, 0x0a, 0xba, 0x20, 0x5a,
		}),chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),chainhash.Hash([chainhash.HashSize]byte{
			0x90, 0x2c, 0xc0, 0x72, 0xe4, 0x2f, 0x8a, 0x53,
			0xd4, 0x09, 0x32, 0xbc, 0x90, 0x9c, 0x0f, 0xda,
			0x4e, 0x55, 0xd2, 0x58, 0x88, 0x72, 0xf8, 0xac,
			0xf3, 0xd0, 0x62, 0x3c, 0x12, 0xbf, 0x90, 0xcd,
		}),	},
	},
	},
	&token.RightDef {Father: chainhash.Hash{},
		Desc: []byte("All Rights"),
		Attrib: 3,
	},
}

// genesisCoinbaseTx is the coinbase transaction for the genesis blocks for
// the main network, regression test network, and test network (version 3).

var coinToken = token.Token{
	TokenType: 0,
	Value: &token.NumToken{Val: 5000000000},
	Rights: []chainhash.Hash{},
}

var genesisCoinbaseTx = wire.MsgTx{
	Version: 1,
	TxDef: []token.Definition{},
	TxIn: []*wire.TxIn{
		{
			PreviousOutPoint: wire.OutPoint{
				Hash:  chainhash.Hash{},
				Index: 0xffffffff,
			},
			SignatureScript: []byte("Omega chain, the final block chain!"),
			Sequence: 0xffffffff,
		},
	},
	TxOut: []*wire.TxOut{
		{
			Token:coinToken,
			PkScript: []byte{
				0x76, 0xA9, 0x14, 0x2F, 0xE0, 0xEF, 0x92, 0x85, 0xA1, 0x0E,
				0x86, 0x0C, 0x25, 0xE0, 0x3C, 0x3F, 0xF8, 0x59, 0x93, 0xD3,
				0xFF, 0xC3, 0x5E, 0x88, 0xAC,
			},
		},
	},
	LockTime: 0,
}

var polygonToken = token.Token{
	TokenType: 3,
	Value: &token.HashToken{Hash: chainhash.Hash([chainhash.HashSize]byte{
		0xcb, 0x27, 0x8f, 0x30, 0x73, 0xa3, 0xc4, 0xee,
		0x22, 0x9f, 0x14, 0x4d, 0x93, 0xef, 0x76, 0x4d,
		0xdf, 0xa1, 0xee, 0xa3, 0x7c, 0xd9, 0xbf, 0xf9,
		0x8e, 0xc4, 0x31, 0x6a, 0x67, 0x84, 0xe9, 0xa9,
	})},
	Rights: []chainhash.Hash{
		chainhash.Hash([chainhash.HashSize]byte{
			0x26, 0x76, 0x88, 0xb6, 0x9c, 0x2b, 0xba, 0xa2,
			0x8c, 0x3c, 0x32, 0x16, 0x3a, 0x92, 0x41, 0x50,
			0x1a, 0xbd, 0x95, 0x8a, 0xe3, 0xca, 0x2b, 0x60,
			0xee, 0x9a, 0x8f, 0xd0, 0xc2, 0xec, 0xe6, 0x59,
		}),
	},
}

var genesisInitPolygonTx = wire.MsgTx{
	Version: 1,
	TxDef: InitDefs,
	TxIn: []*wire.TxIn{},
	TxOut: []*wire.TxOut{
		{
			Token:polygonToken,
			PkScript: []byte{
				0x76, 0xA9, 0x14, 0x2F, 0xE0, 0xEF, 0x92, 0x85, 0xA1, 0x0E,
				0x86, 0x0C, 0x25, 0xE0, 0x3C, 0x3F, 0xF8, 0x59, 0x93, 0xD3,
				0xFF, 0xC3, 0x5E, 0x88, 0xAC,
			},
		},
	},
	LockTime: 0,
}

// genesisMerkleRoot is the hash of the first transaction in the genesis block
// for the main network. ----
var GenesisMerkleRoot = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0x84, 0x66, 0x83, 0xbb, 0xe8, 0x74, 0xfc, 0xe6,
	0xb8, 0xaf, 0x4a, 0x09, 0xf2, 0xcb, 0x58, 0xb1,
	0xba, 0x05, 0xb0, 0x6a, 0x15, 0xeb, 0xa6, 0x50,
	0x06, 0x49, 0xb0, 0x4e, 0x69, 0x45, 0xe8, 0x45,
})

// genesisBlock defines the genesis block of the block chain which serves as the
// public transaction ledger for the main network.
var GenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: GenesisMerkleRoot,        //
		Timestamp:  time.Unix(0x5d8f7127, 0), //
		Bits:       0x1f00ffff,               // 
		Nonce:      69223,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}

// genesisHash is the hash of the first block in the block chain for the main
// network (genesis block). ----
var GenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0xa5, 0x09, 0x03, 0x86, 0x2a, 0x81, 0x6d, 0x8a,
	0x41, 0xea, 0xda, 0x01, 0x8c, 0x05, 0x4e, 0xd9,
	0xd7, 0xa3, 0x90, 0x01, 0x00, 0xaf, 0x6a, 0x11,
	0x87, 0xa8, 0xd1, 0x14, 0x5e, 0x15, 0x00, 0x00,
})

// regTestGenesisHash is the hash of the first block in the block chain for the
// regression test network (genesis block).
var RegTestGenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0x45, 0xfd, 0xc3, 0x38, 0xbb, 0x93, 0x90, 0xf8,
	0xa5, 0xf6, 0x1e, 0xac, 0xc6, 0xfb, 0x91, 0xa3,
	0x47, 0x56, 0xf3, 0xd7, 0xe1, 0x66, 0xcf, 0x44,
	0x2d, 0x9c, 0xd0, 0xb9, 0x3d, 0xd9, 0x70, 0x00,
})

// regTestGenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the regression test network.  It is the same as the merkle root for
// the main network.
var RegTestGenesisMerkleRoot = GenesisMerkleRoot

// regTestGenesisBlock defines the genesis block of the block chain which serves
// as the public transaction ledger for the regression test network.
var RegTestGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: RegTestGenesisMerkleRoot, //
		Timestamp:  time.Unix(0x5d8f7161, 0), //
		Bits:       0x1f7fffff,               //
		Nonce:      316,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}

// testNet3GenesisHash is the hash of the first block in the block chain for the
// test network (version 3).
var TestNet3GenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0x4b, 0x28, 0xcc, 0x18, 0x7e, 0x35, 0x7b, 0x6a,
	0x1b, 0x1a, 0x83, 0x50, 0x72, 0x5d, 0xc2, 0x0e,
	0x7a, 0xcf, 0xbf, 0x74, 0x2d, 0x64, 0xdb, 0xab,
	0x8e, 0xfc, 0x11, 0xb6, 0xc7, 0x8f, 0x00, 0x00,
})

// testNet3GenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the test network (version 3).  It is the same as the merkle root
// for the main network.
var TestNet3GenesisMerkleRoot = GenesisMerkleRoot

// testNet3GenesisBlock defines the genesis block of the block chain which
// serves as the public transaction ledger for the test network (version 3).
var TestNet3GenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},          // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: TestNet3GenesisMerkleRoot, //
		Timestamp:  time.Unix(0x5d8f7162, 0), //
		Bits:       0x1f00ffff,                //
		Nonce:      320540,                // 414098458
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}

// simNetGenesisHash is the hash of the first block in the block chain for the
// simulation test network.
var SimNetGenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0xc4, 0x45, 0xc6, 0x87, 0x7c, 0x6d, 0x76, 0x2e,
	0x48, 0x0d, 0xa0, 0x1b, 0x35, 0x28, 0x48, 0xf7,
	0x0a, 0x18, 0x66, 0xa9, 0x09, 0xac, 0x37, 0x22,
	0x2c, 0x27, 0x2f, 0xa7, 0xc8, 0xac, 0x5a, 0x00,
})

// simNetGenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the simulation test network.  It is the same as the merkle root for
// the main network.
var SimNetGenesisMerkleRoot = GenesisMerkleRoot

// simNetGenesisBlock defines the genesis block of the block chain which serves
// as the public transaction ledger for the simulation test network.
var SimNetGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: SimNetGenesisMerkleRoot,  //
		Timestamp:  time.Unix(0x5d8f71d3, 0), //
		Bits:       0x1f7fffff,               //
		Nonce:      562,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}
