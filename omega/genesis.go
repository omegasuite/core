// Copyright (c) 2019 The Omega developers
// Use of this source code is governed by an license that can
// be found in the LICENSE file.

package omega

import (
	"time"

	"github.com/btcsuite/btcd/chaincfg/chainhash"
//	"github.com/btcsuite/btcd/wire/common"
	"github.com/btcsuite/btcd/wire"
	"github.com/btcsuite/omega/token"
)

var IntlDateLine = [][2]float64 {	// international date line
		{  90.0000,  180.0000 },
		{  75.0000,  180.0000 },
		{  68.2456,  -169. },
		{  65.5189,  -169. },
		{  53.0863,  170.0500 },
		{  47.8353,  180.0000 },
		{  -1.2,  180.0000 },
		{  -1.2,  -159.6500 },
		{  2.9000,  -159.6500 },
		{  2.9000,  -162.8500 },
		{  6.5000,  -162.8500 },
		{  6.5000,  -155.9500 },
		{  -9.5000,  -149.6500 },
		{  -11.7000,  -149.6500 },
		{  -11.7000,  -154.0500 },
		{  -10.7000,  -154.0500 },
		{  -10.70000,  -166.5500 },
		{  -15.6000,  -172.700 },
		{  -45.0000,  -172.700 },
		{  -51.1815,  180.0000 },
		{  -90.0000,  180.0000 },
}

var InitDefs = []token.Definition{
&token.VertexDef {
	Lat: 0x16800000,
	Lng: 0xd3000000,
},
&token.VertexDef {
	Lat: 0x12c00000,
	Lng: 0xd3000000,
},
&token.VertexDef {
	Lat: 0x110fb7e9,
	Lng: 0xd5c00000,
},
&token.VertexDef {
	Lat: 0x106135a8,
	Lng: 0xd5c00000,
},
&token.VertexDef {
	Lat: 0xd4585f0,
	Lng: 0xd0833334,
},
&token.VertexDef {
	Lat: 0xbf5758e,
	Lng: 0xd3000000,
},
&token.VertexDef {
	Lat: 0xffb33334,
	Lng: 0xd3000000,
},
&token.VertexDef {
	Lat: 0xffb33334,
	Lng: 0xd8166667,
},
&token.VertexDef {
	Lat: 0xb99999,
	Lng: 0xd8166667,
},
&token.VertexDef {
	Lat: 0xb99999,
	Lng: 0xd749999a,
},
&token.VertexDef {
	Lat: 0x1a00000,
	Lng: 0xd749999a,
},
&token.VertexDef {
	Lat: 0x1a00000,
	Lng: 0xd9033334,
},
&token.VertexDef {
	Lat: 0xfda00000,
	Lng: 0xda966667,
},
&token.VertexDef {
	Lat: 0xfd133334,
	Lng: 0xda966667,
},
&token.VertexDef {
	Lat: 0xfd133334,
	Lng: 0xd97ccccd,
},
&token.VertexDef {
	Lat: 0xfd533334,
	Lng: 0xd97ccccd,
},
&token.VertexDef {
	Lat: 0xfd533334,
	Lng: 0xd65ccccd,
},
&token.VertexDef {
	Lat: 0xfc19999a,
	Lng: 0xd4d33334,
},
&token.VertexDef {
	Lat: 0xf4c00000,
	Lng: 0xd4d33334,
},
&token.VertexDef {
	Lat: 0xf334624e,
	Lng: 0xd3000000,
},
&token.VertexDef {
	Lat: 0xe9800000,
	Lng: 0xd3000000,
},
&token.VertexDef {
	Lat: 0xe9800000,
	Lng: 0x2d000000,
},
&token.VertexDef {
	Lat: 0xf334624e,
	Lng: 0x2d000000,
},
&token.VertexDef {
	Lat: 0xf4c00000,
	Lng: 0x2ed33333,
},
&token.VertexDef {
	Lat: 0xfc19999a,
	Lng: 0x2ed33333,
},
&token.VertexDef {
	Lat: 0xfd533334,
	Lng: 0x305ccccc,
},
&token.VertexDef {
	Lat: 0xfd533334,
	Lng: 0x337ccccc,
},
&token.VertexDef {
	Lat: 0xfd133334,
	Lng: 0x337ccccc,
},
&token.VertexDef {
	Lat: 0xfd133334,
	Lng: 0x34966666,
},
&token.VertexDef {
	Lat: 0xfda00000,
	Lng: 0x34966666,
},
&token.VertexDef {
	Lat: 0x1a00000,
	Lng: 0x33033333,
},
&token.VertexDef {
	Lat: 0x1a00000,
	Lng: 0x31499999,
},
&token.VertexDef {
	Lat: 0xb99999,
	Lng: 0x31499999,
},
&token.VertexDef {
	Lat: 0xb99999,
	Lng: 0x32166666,
},
&token.VertexDef {
	Lat: 0xffb33334,
	Lng: 0x32166666,
},
&token.VertexDef {
	Lat: 0xffb33334,
	Lng: 0x2d000000,
},
&token.VertexDef {
	Lat: 0xbf5758e,
	Lng: 0x2d000000,
},
&token.VertexDef {
	Lat: 0xd4585f0,
	Lng: 0x2a833333,
},
&token.VertexDef {
	Lat: 0x106135a8,
	Lng: 0x2fc00000,
},
&token.VertexDef {
	Lat: 0x110fb7e9,
	Lng: 0x2fc00000,
},
&token.VertexDef {
	Lat: 0x12c00000,
	Lng: 0x2d000000,
},
&token.VertexDef {
	Lat: 0x16800000,
	Lng: 0x2d000000,
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xef, 0x47, 0x77, 0x39, 0xa7, 0x5b, 0x4b, 0xff, 
		0x95, 0x54, 0x80, 0x2d, 0xdf, 0x34, 0xbe, 0xd1, 
		0x2f, 0xe4, 0xfb, 0x18, 0xa6, 0x30, 0xa7, 0xca, 
		0x0c, 0x56, 0x84, 0xb7, 0x42, 0x4d, 0xa2, 0x3e, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xd3, 0x2f, 0x8e, 0xae, 0x91, 0xa4, 0x15, 0x7d, 
		0x67, 0x3a, 0x3e, 0x6a, 0x22, 0x67, 0x1e, 0xa2, 
		0x79, 0x79, 0x9e, 0x2f, 0x02, 0x0a, 0x98, 0xc6, 
		0x9b, 0xa0, 0xfc, 0x16, 0x39, 0x9d, 0xc3, 0x70, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xd3, 0x2f, 0x8e, 0xae, 0x91, 0xa4, 0x15, 0x7d, 
		0x67, 0x3a, 0x3e, 0x6a, 0x22, 0x67, 0x1e, 0xa2, 
		0x79, 0x79, 0x9e, 0x2f, 0x02, 0x0a, 0x98, 0xc6, 
		0x9b, 0xa0, 0xfc, 0x16, 0x39, 0x9d, 0xc3, 0x70, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x15, 0x4b, 0xee, 0x3e, 0xa2, 0x33, 0xfd, 0x38, 
		0x04, 0x3d, 0x07, 0xf8, 0x4b, 0x95, 0xb4, 0x7c, 
		0x04, 0xfe, 0xc5, 0x8e, 0xef, 0x25, 0x5f, 0x25, 
		0x10, 0x92, 0x51, 0x30, 0xb8, 0x5c, 0xab, 0x60, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x15, 0x4b, 0xee, 0x3e, 0xa2, 0x33, 0xfd, 0x38, 
		0x04, 0x3d, 0x07, 0xf8, 0x4b, 0x95, 0xb4, 0x7c, 
		0x04, 0xfe, 0xc5, 0x8e, 0xef, 0x25, 0x5f, 0x25, 
		0x10, 0x92, 0x51, 0x30, 0xb8, 0x5c, 0xab, 0x60, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x60, 0x90, 0xbf, 0x11, 0xeb, 0x17, 0xf9, 0xad, 
		0x13, 0xfe, 0xb4, 0x3a, 0x16, 0x85, 0x40, 0xb5, 
		0x81, 0x1e, 0x32, 0x5b, 0x36, 0xc8, 0xfd, 0x3c, 
		0x7a, 0xf4, 0x40, 0xb3, 0x2c, 0x2c, 0x33, 0xb9, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x60, 0x90, 0xbf, 0x11, 0xeb, 0x17, 0xf9, 0xad, 
		0x13, 0xfe, 0xb4, 0x3a, 0x16, 0x85, 0x40, 0xb5, 
		0x81, 0x1e, 0x32, 0x5b, 0x36, 0xc8, 0xfd, 0x3c, 
		0x7a, 0xf4, 0x40, 0xb3, 0x2c, 0x2c, 0x33, 0xb9, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xef, 0x47, 0x77, 0x39, 0xa7, 0x5b, 0x4b, 0xff, 
		0x95, 0x54, 0x80, 0x2d, 0xdf, 0x34, 0xbe, 0xd1, 
		0x2f, 0xe4, 0xfb, 0x18, 0xa6, 0x30, 0xa7, 0xca, 
		0x0c, 0x56, 0x84, 0xb7, 0x42, 0x4d, 0xa2, 0x3e, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xef, 0x47, 0x77, 0x39, 0xa7, 0x5b, 0x4b, 0xff, 
		0x95, 0x54, 0x80, 0x2d, 0xdf, 0x34, 0xbe, 0xd1, 
		0x2f, 0xe4, 0xfb, 0x18, 0xa6, 0x30, 0xa7, 0xca, 
		0x0c, 0x56, 0x84, 0xb7, 0x42, 0x4d, 0xa2, 0x3e, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x62, 0x68, 0x07, 0xdb, 0x98, 0x54, 0x54, 0x36, 
		0x42, 0xc7, 0xa8, 0x61, 0x29, 0x06, 0xfe, 0xad, 
		0x09, 0x99, 0xa3, 0x85, 0xfd, 0xe9, 0xa5, 0xb6, 
		0x26, 0x8d, 0xac, 0xf3, 0x7d, 0x15, 0x3d, 0x36, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x15, 0x4b, 0xee, 0x3e, 0xa2, 0x33, 0xfd, 0x38, 
		0x04, 0x3d, 0x07, 0xf8, 0x4b, 0x95, 0xb4, 0x7c, 
		0x04, 0xfe, 0xc5, 0x8e, 0xef, 0x25, 0x5f, 0x25, 
		0x10, 0x92, 0x51, 0x30, 0xb8, 0x5c, 0xab, 0x60, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x59, 0xa4, 0xfe, 0xe2, 0x39, 0x77, 0x87, 0xfa, 
		0x2a, 0xdf, 0x88, 0x1b, 0x1c, 0xdb, 0x01, 0x33, 
		0x19, 0x75, 0xa1, 0x9d, 0xe8, 0x09, 0x80, 0x2d, 
		0x30, 0x6f, 0x37, 0x3b, 0x5b, 0x62, 0x94, 0x87, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x62, 0x68, 0x07, 0xdb, 0x98, 0x54, 0x54, 0x36, 
		0x42, 0xc7, 0xa8, 0x61, 0x29, 0x06, 0xfe, 0xad, 
		0x09, 0x99, 0xa3, 0x85, 0xfd, 0xe9, 0xa5, 0xb6, 
		0x26, 0x8d, 0xac, 0xf3, 0x7d, 0x15, 0x3d, 0x36, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xf7, 0xe0, 0x64, 0x6a, 0xf8, 0x2b, 0x1c, 0x27, 
		0x5c, 0x60, 0x57, 0x31, 0x35, 0xb6, 0xc5, 0xc8, 
		0xa0, 0xd8, 0x33, 0x2f, 0x17, 0x7b, 0xbf, 0xfb, 
		0x3d, 0x14, 0xde, 0xfe, 0x22, 0x84, 0x2c, 0x48, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x59, 0xa4, 0xfe, 0xe2, 0x39, 0x77, 0x87, 0xfa, 
		0x2a, 0xdf, 0x88, 0x1b, 0x1c, 0xdb, 0x01, 0x33, 
		0x19, 0x75, 0xa1, 0x9d, 0xe8, 0x09, 0x80, 0x2d, 
		0x30, 0x6f, 0x37, 0x3b, 0x5b, 0x62, 0x94, 0x87, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xf6, 0x26, 0xc1, 0xc6, 0xbc, 0x68, 0xe7, 0xbe, 
		0xe0, 0xaf, 0x1b, 0xc2, 0x35, 0xb9, 0x31, 0xe5, 
		0xfd, 0x1c, 0x45, 0x34, 0xc5, 0xb6, 0x28, 0xd0, 
		0xd7, 0x7b, 0x8b, 0xe7, 0xd5, 0x24, 0x48, 0x9f, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xf7, 0xe0, 0x64, 0x6a, 0xf8, 0x2b, 0x1c, 0x27, 
		0x5c, 0x60, 0x57, 0x31, 0x35, 0xb6, 0xc5, 0xc8, 
		0xa0, 0xd8, 0x33, 0x2f, 0x17, 0x7b, 0xbf, 0xfb, 
		0x3d, 0x14, 0xde, 0xfe, 0x22, 0x84, 0x2c, 0x48, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x48, 0x4f, 0x59, 0xa0, 0x6a, 0x21, 0x3c, 0x82, 
		0xa7, 0xa2, 0xd9, 0xc9, 0x84, 0x42, 0xc0, 0x50, 
		0x65, 0x68, 0xa9, 0x24, 0x76, 0x02, 0x28, 0x74, 
		0x6b, 0xa7, 0x11, 0x52, 0x57, 0x05, 0x3a, 0x1a, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xf6, 0x26, 0xc1, 0xc6, 0xbc, 0x68, 0xe7, 0xbe, 
		0xe0, 0xaf, 0x1b, 0xc2, 0x35, 0xb9, 0x31, 0xe5, 
		0xfd, 0x1c, 0x45, 0x34, 0xc5, 0xb6, 0x28, 0xd0, 
		0xd7, 0x7b, 0x8b, 0xe7, 0xd5, 0x24, 0x48, 0x9f, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xa0, 0x3b, 0xb5, 0x88, 0xf5, 0x2b, 0x1f, 0x84, 
		0x69, 0x90, 0x66, 0x43, 0x3a, 0x9e, 0x68, 0xb6, 
		0xfe, 0xfa, 0x01, 0x82, 0x5c, 0xb5, 0xd4, 0xc5, 
		0xf1, 0x02, 0xf9, 0x08, 0xf3, 0xe4, 0x55, 0xb7, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x48, 0x4f, 0x59, 0xa0, 0x6a, 0x21, 0x3c, 0x82, 
		0xa7, 0xa2, 0xd9, 0xc9, 0x84, 0x42, 0xc0, 0x50, 
		0x65, 0x68, 0xa9, 0x24, 0x76, 0x02, 0x28, 0x74, 
		0x6b, 0xa7, 0x11, 0x52, 0x57, 0x05, 0x3a, 0x1a, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x7a, 0x3f, 0xba, 0x11, 0x1c, 0xf0, 0xa5, 0x5b, 
		0xb8, 0x3d, 0x54, 0xc1, 0xc4, 0x8b, 0xe4, 0xfe, 
		0xb3, 0xf9, 0x95, 0x11, 0xbf, 0x29, 0x13, 0xfa, 
		0x88, 0x12, 0xee, 0xab, 0x87, 0x39, 0x84, 0x90, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xa0, 0x3b, 0xb5, 0x88, 0xf5, 0x2b, 0x1f, 0x84, 
		0x69, 0x90, 0x66, 0x43, 0x3a, 0x9e, 0x68, 0xb6, 
		0xfe, 0xfa, 0x01, 0x82, 0x5c, 0xb5, 0xd4, 0xc5, 
		0xf1, 0x02, 0xf9, 0x08, 0xf3, 0xe4, 0x55, 0xb7, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xc4, 0x55, 0x0c, 0x51, 0x40, 0x3c, 0x10, 0x30, 
		0x31, 0x75, 0x3b, 0xf5, 0x5d, 0xba, 0x38, 0x13, 
		0x44, 0xb2, 0x16, 0x35, 0x89, 0x4e, 0xde, 0x34, 
		0xbf, 0x8a, 0xec, 0x12, 0x91, 0x2b, 0x52, 0xed, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x7a, 0x3f, 0xba, 0x11, 0x1c, 0xf0, 0xa5, 0x5b, 
		0xb8, 0x3d, 0x54, 0xc1, 0xc4, 0x8b, 0xe4, 0xfe, 
		0xb3, 0xf9, 0x95, 0x11, 0xbf, 0x29, 0x13, 0xfa, 
		0x88, 0x12, 0xee, 0xab, 0x87, 0x39, 0x84, 0x90, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x05, 0xbd, 0x78, 0x9c, 0x1a, 0xd2, 0x00, 0x37, 
		0x91, 0x72, 0x9f, 0x3b, 0x44, 0x78, 0xf8, 0x27, 
		0x91, 0xbf, 0x3f, 0x74, 0xf4, 0xaf, 0x3a, 0x67, 
		0x18, 0x44, 0xc1, 0x6a, 0x89, 0xb9, 0xfd, 0xcb, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xc4, 0x55, 0x0c, 0x51, 0x40, 0x3c, 0x10, 0x30, 
		0x31, 0x75, 0x3b, 0xf5, 0x5d, 0xba, 0x38, 0x13, 
		0x44, 0xb2, 0x16, 0x35, 0x89, 0x4e, 0xde, 0x34, 
		0xbf, 0x8a, 0xec, 0x12, 0x91, 0x2b, 0x52, 0xed, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x61, 0xa2, 0x3a, 0x89, 0xf9, 0xab, 0xb4, 0x12, 
		0x51, 0x44, 0x3d, 0xde, 0x98, 0x3a, 0xfc, 0xc0, 
		0x21, 0x85, 0x9f, 0xd4, 0x4b, 0x17, 0x95, 0x7e, 
		0xad, 0x8e, 0x2c, 0x9d, 0xbc, 0xc3, 0xb6, 0x0f, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x05, 0xbd, 0x78, 0x9c, 0x1a, 0xd2, 0x00, 0x37, 
		0x91, 0x72, 0x9f, 0x3b, 0x44, 0x78, 0xf8, 0x27, 
		0x91, 0xbf, 0x3f, 0x74, 0xf4, 0xaf, 0x3a, 0x67, 
		0x18, 0x44, 0xc1, 0x6a, 0x89, 0xb9, 0xfd, 0xcb, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x89, 0x96, 0xf1, 0xab, 0x38, 0xfe, 0xfa, 0x00, 
		0xe5, 0x7b, 0x6f, 0x56, 0x3b, 0x71, 0xc7, 0xfe, 
		0xa7, 0xf3, 0x16, 0xb8, 0xa8, 0x6e, 0xf5, 0x33, 
		0x2c, 0x5c, 0xc0, 0x1f, 0xdb, 0x53, 0x99, 0xe6, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x61, 0xa2, 0x3a, 0x89, 0xf9, 0xab, 0xb4, 0x12, 
		0x51, 0x44, 0x3d, 0xde, 0x98, 0x3a, 0xfc, 0xc0, 
		0x21, 0x85, 0x9f, 0xd4, 0x4b, 0x17, 0x95, 0x7e, 
		0xad, 0x8e, 0x2c, 0x9d, 0xbc, 0xc3, 0xb6, 0x0f, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x4e, 0x9e, 0x04, 0x6f, 0x63, 0x4a, 0x7e, 0xe1, 
		0x51, 0x77, 0x9b, 0xd3, 0x32, 0x20, 0xbc, 0x66, 
		0xf2, 0x4b, 0xd8, 0x63, 0x40, 0xa6, 0x5c, 0xd5, 
		0x62, 0x02, 0x8d, 0x13, 0x4e, 0xcd, 0x0f, 0x67, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x89, 0x96, 0xf1, 0xab, 0x38, 0xfe, 0xfa, 0x00, 
		0xe5, 0x7b, 0x6f, 0x56, 0x3b, 0x71, 0xc7, 0xfe, 
		0xa7, 0xf3, 0x16, 0xb8, 0xa8, 0x6e, 0xf5, 0x33, 
		0x2c, 0x5c, 0xc0, 0x1f, 0xdb, 0x53, 0x99, 0xe6, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xf1, 0x5d, 0x34, 0xb5, 0xd7, 0x14, 0x76, 0xb1, 
		0xef, 0xf7, 0x3f, 0x8a, 0x49, 0x77, 0xc5, 0x4a, 
		0x0a, 0x05, 0x80, 0xb3, 0x8d, 0x44, 0x83, 0x08, 
		0xd0, 0x64, 0x83, 0xfc, 0xb1, 0xe1, 0x2b, 0xde, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x4e, 0x9e, 0x04, 0x6f, 0x63, 0x4a, 0x7e, 0xe1, 
		0x51, 0x77, 0x9b, 0xd3, 0x32, 0x20, 0xbc, 0x66, 
		0xf2, 0x4b, 0xd8, 0x63, 0x40, 0xa6, 0x5c, 0xd5, 
		0x62, 0x02, 0x8d, 0x13, 0x4e, 0xcd, 0x0f, 0x67, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x60, 0x2f, 0xe8, 0xd8, 0xe7, 0x57, 0x9d, 0xeb, 
		0x12, 0x0f, 0x2d, 0x8c, 0x70, 0x73, 0x31, 0xd4, 
		0xa3, 0x3d, 0xe2, 0x03, 0xa1, 0x24, 0x99, 0xa6, 
		0x4f, 0x8a, 0x9d, 0xf8, 0xf7, 0xa3, 0x35, 0x83, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xf1, 0x5d, 0x34, 0xb5, 0xd7, 0x14, 0x76, 0xb1, 
		0xef, 0xf7, 0x3f, 0x8a, 0x49, 0x77, 0xc5, 0x4a, 
		0x0a, 0x05, 0x80, 0xb3, 0x8d, 0x44, 0x83, 0x08, 
		0xd0, 0x64, 0x83, 0xfc, 0xb1, 0xe1, 0x2b, 0xde, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xfc, 0xc2, 0x04, 0x6b, 0x04, 0x27, 0x09, 0xf1, 
		0xa7, 0x0b, 0xb9, 0x0a, 0xd7, 0x62, 0x27, 0x98, 
		0x1c, 0xfd, 0xb5, 0x1c, 0x16, 0x7e, 0xa2, 0x5b, 
		0x5c, 0xfe, 0xa5, 0x27, 0xc4, 0xcf, 0x56, 0x2c, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x60, 0x2f, 0xe8, 0xd8, 0xe7, 0x57, 0x9d, 0xeb, 
		0x12, 0x0f, 0x2d, 0x8c, 0x70, 0x73, 0x31, 0xd4, 
		0xa3, 0x3d, 0xe2, 0x03, 0xa1, 0x24, 0x99, 0xa6, 
		0x4f, 0x8a, 0x9d, 0xf8, 0xf7, 0xa3, 0x35, 0x83, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xf9, 0x7a, 0xa5, 0x10, 0x48, 0xa0, 0x04, 0xc8, 
		0x32, 0x0b, 0x01, 0x31, 0x65, 0x12, 0x42, 0x3a, 
		0x83, 0x3e, 0x67, 0xa1, 0xd7, 0x49, 0x16, 0x76, 
		0x27, 0x62, 0xbd, 0x58, 0x6d, 0x30, 0x42, 0x1c, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xfc, 0xc2, 0x04, 0x6b, 0x04, 0x27, 0x09, 0xf1, 
		0xa7, 0x0b, 0xb9, 0x0a, 0xd7, 0x62, 0x27, 0x98, 
		0x1c, 0xfd, 0xb5, 0x1c, 0x16, 0x7e, 0xa2, 0x5b, 
		0x5c, 0xfe, 0xa5, 0x27, 0xc4, 0xcf, 0x56, 0x2c, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xc1, 0x69, 0x13, 0x3a, 0x66, 0x4e, 0x49, 0x12, 
		0xe8, 0x2a, 0xff, 0x97, 0xf6, 0xe1, 0x53, 0x50, 
		0x7c, 0xf0, 0x75, 0x2d, 0x3e, 0xa7, 0xef, 0x95, 
		0xc8, 0xba, 0xb9, 0x81, 0x3e, 0x0f, 0x5f, 0x92, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xf9, 0x7a, 0xa5, 0x10, 0x48, 0xa0, 0x04, 0xc8, 
		0x32, 0x0b, 0x01, 0x31, 0x65, 0x12, 0x42, 0x3a, 
		0x83, 0x3e, 0x67, 0xa1, 0xd7, 0x49, 0x16, 0x76, 
		0x27, 0x62, 0xbd, 0x58, 0x6d, 0x30, 0x42, 0x1c, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x73, 0x2d, 0x8a, 0x99, 0x4a, 0x2b, 0x84, 0x25, 
		0x04, 0xec, 0x2c, 0x15, 0x74, 0x2b, 0xca, 0x82, 
		0x37, 0xe4, 0xa8, 0x0d, 0x94, 0x47, 0x15, 0x0c, 
		0x7f, 0x53, 0x13, 0xe8, 0x16, 0xf8, 0x40, 0xe8, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xc1, 0x69, 0x13, 0x3a, 0x66, 0x4e, 0x49, 0x12, 
		0xe8, 0x2a, 0xff, 0x97, 0xf6, 0xe1, 0x53, 0x50, 
		0x7c, 0xf0, 0x75, 0x2d, 0x3e, 0xa7, 0xef, 0x95, 
		0xc8, 0xba, 0xb9, 0x81, 0x3e, 0x0f, 0x5f, 0x92, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xfe, 0x42, 0x9a, 0x6e, 0x69, 0x73, 0x7f, 0x0c, 
		0xe2, 0xad, 0x5b, 0xbd, 0x6b, 0x32, 0xcb, 0xac, 
		0xd7, 0xaf, 0xb7, 0xe7, 0x65, 0x9e, 0x51, 0x01, 
		0xab, 0x36, 0x94, 0x36, 0x3a, 0x22, 0xce, 0x30, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x73, 0x2d, 0x8a, 0x99, 0x4a, 0x2b, 0x84, 0x25, 
		0x04, 0xec, 0x2c, 0x15, 0x74, 0x2b, 0xca, 0x82, 
		0x37, 0xe4, 0xa8, 0x0d, 0x94, 0x47, 0x15, 0x0c, 
		0x7f, 0x53, 0x13, 0xe8, 0x16, 0xf8, 0x40, 0xe8, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xbd, 0x29, 0x70, 0x64, 0xca, 0xb0, 0x08, 0x50, 
		0x5b, 0x38, 0x23, 0x28, 0x10, 0xd7, 0x7a, 0xbb, 
		0xa3, 0xe0, 0x83, 0x4d, 0x64, 0xc4, 0x8e, 0xec, 
		0xda, 0xcf, 0xde, 0x76, 0x5d, 0xbf, 0xe7, 0x14, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xfe, 0x42, 0x9a, 0x6e, 0x69, 0x73, 0x7f, 0x0c, 
		0xe2, 0xad, 0x5b, 0xbd, 0x6b, 0x32, 0xcb, 0xac, 
		0xd7, 0xaf, 0xb7, 0xe7, 0x65, 0x9e, 0x51, 0x01, 
		0xab, 0x36, 0x94, 0x36, 0x3a, 0x22, 0xce, 0x30, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x8f, 0xa2, 0xf8, 0x16, 0x99, 0x9c, 0xca, 0xab, 
		0x8a, 0xdf, 0x1c, 0x3d, 0x1e, 0x24, 0x9d, 0x14, 
		0xe5, 0xd4, 0x4d, 0x3e, 0x5a, 0x29, 0x57, 0xb5, 
		0xe8, 0x0f, 0x24, 0x72, 0x80, 0x7e, 0x6a, 0xcd, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xbd, 0x29, 0x70, 0x64, 0xca, 0xb0, 0x08, 0x50, 
		0x5b, 0x38, 0x23, 0x28, 0x10, 0xd7, 0x7a, 0xbb, 
		0xa3, 0xe0, 0x83, 0x4d, 0x64, 0xc4, 0x8e, 0xec, 
		0xda, 0xcf, 0xde, 0x76, 0x5d, 0xbf, 0xe7, 0x14, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x41, 0x43, 0x78, 0x5c, 0x16, 0x63, 0x26, 0xf3, 
		0x1b, 0x32, 0x8d, 0xb2, 0x90, 0x4f, 0xe7, 0x17, 
		0x9c, 0xa1, 0x07, 0x1f, 0x5f, 0x54, 0xea, 0xb7, 
		0xcd, 0xc2, 0xa0, 0x83, 0x4f, 0xcd, 0xe3, 0xac, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x8f, 0xa2, 0xf8, 0x16, 0x99, 0x9c, 0xca, 0xab, 
		0x8a, 0xdf, 0x1c, 0x3d, 0x1e, 0x24, 0x9d, 0x14, 
		0xe5, 0xd4, 0x4d, 0x3e, 0x5a, 0x29, 0x57, 0xb5, 
		0xe8, 0x0f, 0x24, 0x72, 0x80, 0x7e, 0x6a, 0xcd, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x22, 0x12, 0x5c, 0x8b, 0xf5, 0x8f, 0x90, 0x33, 
		0x19, 0xd9, 0x5e, 0x5c, 0xf7, 0x1f, 0x28, 0xc2, 
		0xdf, 0x55, 0x9b, 0x79, 0x86, 0x71, 0x9f, 0xc5, 
		0xc2, 0x48, 0x62, 0x80, 0x6c, 0xe6, 0x26, 0x6d, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x41, 0x43, 0x78, 0x5c, 0x16, 0x63, 0x26, 0xf3, 
		0x1b, 0x32, 0x8d, 0xb2, 0x90, 0x4f, 0xe7, 0x17, 
		0x9c, 0xa1, 0x07, 0x1f, 0x5f, 0x54, 0xea, 0xb7, 
		0xcd, 0xc2, 0xa0, 0x83, 0x4f, 0xcd, 0xe3, 0xac, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x37, 0xd9, 0x59, 0xdb, 0x1e, 0xf8, 0x5d, 0xac, 
		0x15, 0xbc, 0x8e, 0x0f, 0xc7, 0x23, 0x45, 0xff, 
		0xcc, 0x2a, 0xdf, 0x48, 0xe4, 0xee, 0x3e, 0x76, 
		0x9c, 0x65, 0x1a, 0x4a, 0x71, 0x98, 0xb8, 0xca, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x22, 0x12, 0x5c, 0x8b, 0xf5, 0x8f, 0x90, 0x33, 
		0x19, 0xd9, 0x5e, 0x5c, 0xf7, 0x1f, 0x28, 0xc2, 
		0xdf, 0x55, 0x9b, 0x79, 0x86, 0x71, 0x9f, 0xc5, 
		0xc2, 0x48, 0x62, 0x80, 0x6c, 0xe6, 0x26, 0x6d, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x6d, 0x09, 0x85, 0x81, 0x6b, 0x63, 0xca, 0x48, 
		0x42, 0x69, 0x2a, 0x2c, 0x92, 0xf2, 0xe4, 0x33, 
		0x59, 0x3d, 0xea, 0x57, 0x4a, 0xbf, 0x06, 0x35, 
		0xb7, 0x59, 0x4e, 0x21, 0x30, 0x50, 0xc6, 0xfb, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x37, 0xd9, 0x59, 0xdb, 0x1e, 0xf8, 0x5d, 0xac, 
		0x15, 0xbc, 0x8e, 0x0f, 0xc7, 0x23, 0x45, 0xff, 
		0xcc, 0x2a, 0xdf, 0x48, 0xe4, 0xee, 0x3e, 0x76, 
		0x9c, 0x65, 0x1a, 0x4a, 0x71, 0x98, 0xb8, 0xca, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xdf, 0x40, 0x6b, 0x1f, 0x50, 0x11, 0x36, 0xf5, 
		0xb2, 0x63, 0xf3, 0xad, 0xaa, 0xcf, 0xfb, 0x63, 
		0x29, 0xea, 0xbd, 0xd0, 0x1e, 0x9f, 0x2a, 0x91, 
		0x77, 0x2a, 0x75, 0xe3, 0xe1, 0x36, 0x56, 0x9f, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x6d, 0x09, 0x85, 0x81, 0x6b, 0x63, 0xca, 0x48, 
		0x42, 0x69, 0x2a, 0x2c, 0x92, 0xf2, 0xe4, 0x33, 
		0x59, 0x3d, 0xea, 0x57, 0x4a, 0xbf, 0x06, 0x35, 
		0xb7, 0x59, 0x4e, 0x21, 0x30, 0x50, 0xc6, 0xfb, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xfd, 0x21, 0x54, 0x8b, 0xcd, 0xb6, 0x13, 0xea, 
		0xca, 0x30, 0x0d, 0x12, 0xef, 0xc0, 0x75, 0x91, 
		0xe8, 0xbd, 0x96, 0x60, 0x21, 0xb8, 0xb3, 0x42, 
		0xfd, 0x6b, 0xa1, 0x00, 0xf7, 0x35, 0x08, 0xc4, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xdf, 0x40, 0x6b, 0x1f, 0x50, 0x11, 0x36, 0xf5, 
		0xb2, 0x63, 0xf3, 0xad, 0xaa, 0xcf, 0xfb, 0x63, 
		0x29, 0xea, 0xbd, 0xd0, 0x1e, 0x9f, 0x2a, 0x91, 
		0x77, 0x2a, 0x75, 0xe3, 0xe1, 0x36, 0x56, 0x9f, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x0d, 0xc6, 0x50, 0x86, 0xf7, 0xfa, 0x7f, 0xe1, 
		0xf5, 0x66, 0xf4, 0xb7, 0xae, 0x68, 0x68, 0x7b, 
		0x4c, 0x1e, 0xf0, 0x95, 0x81, 0x86, 0x42, 0x13, 
		0x4a, 0xee, 0x50, 0x5e, 0xd5, 0xbb, 0x57, 0x29, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xfd, 0x21, 0x54, 0x8b, 0xcd, 0xb6, 0x13, 0xea, 
		0xca, 0x30, 0x0d, 0x12, 0xef, 0xc0, 0x75, 0x91, 
		0xe8, 0xbd, 0x96, 0x60, 0x21, 0xb8, 0xb3, 0x42, 
		0xfd, 0x6b, 0xa1, 0x00, 0xf7, 0x35, 0x08, 0xc4, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x63, 0xc9, 0xf6, 0xc8, 0x4d, 0x45, 0x05, 0x7e, 
		0x64, 0xfb, 0xdd, 0x50, 0x98, 0x46, 0x25, 0x16, 
		0x89, 0x77, 0x56, 0xac, 0xd6, 0x68, 0x05, 0x18, 
		0x2a, 0x74, 0x3d, 0x10, 0xca, 0xb6, 0x66, 0x4b, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x0d, 0xc6, 0x50, 0x86, 0xf7, 0xfa, 0x7f, 0xe1, 
		0xf5, 0x66, 0xf4, 0xb7, 0xae, 0x68, 0x68, 0x7b, 
		0x4c, 0x1e, 0xf0, 0x95, 0x81, 0x86, 0x42, 0x13, 
		0x4a, 0xee, 0x50, 0x5e, 0xd5, 0xbb, 0x57, 0x29, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xfb, 0xf0, 0xf6, 0xfe, 0xb5, 0x53, 0x44, 0xd8, 
		0x33, 0xe5, 0x97, 0xf7, 0x53, 0xc6, 0xdf, 0x41, 
		0x2e, 0x9d, 0xbf, 0x33, 0xa4, 0x62, 0x1e, 0x0d, 
		0x5a, 0x52, 0x2e, 0xde, 0xa4, 0x58, 0x88, 0x09, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x63, 0xc9, 0xf6, 0xc8, 0x4d, 0x45, 0x05, 0x7e, 
		0x64, 0xfb, 0xdd, 0x50, 0x98, 0x46, 0x25, 0x16, 
		0x89, 0x77, 0x56, 0xac, 0xd6, 0x68, 0x05, 0x18, 
		0x2a, 0x74, 0x3d, 0x10, 0xca, 0xb6, 0x66, 0x4b, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xf3, 0x48, 0xc3, 0xa6, 0xf7, 0x5f, 0xc8, 0x20, 
		0x18, 0x0b, 0xd0, 0xb8, 0x10, 0x19, 0xfe, 0xb3, 
		0x5b, 0x36, 0x38, 0x08, 0x4b, 0x68, 0x53, 0x48, 
		0x98, 0x19, 0xf8, 0x36, 0x73, 0x1d, 0xef, 0x51, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xfb, 0xf0, 0xf6, 0xfe, 0xb5, 0x53, 0x44, 0xd8, 
		0x33, 0xe5, 0x97, 0xf7, 0x53, 0xc6, 0xdf, 0x41, 
		0x2e, 0x9d, 0xbf, 0x33, 0xa4, 0x62, 0x1e, 0x0d, 
		0x5a, 0x52, 0x2e, 0xde, 0xa4, 0x58, 0x88, 0x09, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x39, 0x62, 0x10, 0xdd, 0x8e, 0x8d, 0x2f, 0x98, 
		0x2f, 0x7b, 0x76, 0x94, 0xfc, 0x70, 0xd7, 0x52, 
		0x4c, 0xd9, 0xb1, 0x92, 0x5d, 0x73, 0x2c, 0x04, 
		0xcb, 0xef, 0x14, 0xfe, 0x85, 0x03, 0x6c, 0xaf, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xf3, 0x48, 0xc3, 0xa6, 0xf7, 0x5f, 0xc8, 0x20, 
		0x18, 0x0b, 0xd0, 0xb8, 0x10, 0x19, 0xfe, 0xb3, 
		0x5b, 0x36, 0x38, 0x08, 0x4b, 0x68, 0x53, 0x48, 
		0x98, 0x19, 0xf8, 0x36, 0x73, 0x1d, 0xef, 0x51, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x9d, 0x58, 0x4d, 0x44, 0x41, 0xba, 0xd3, 0x24, 
		0x0c, 0xab, 0x75, 0x1b, 0xd4, 0xd0, 0x64, 0x21, 
		0xed, 0x74, 0xfa, 0x0c, 0x0f, 0xc3, 0x59, 0x2a, 
		0xd7, 0x28, 0x37, 0x2c, 0x31, 0x03, 0x59, 0x6d, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x39, 0x62, 0x10, 0xdd, 0x8e, 0x8d, 0x2f, 0x98, 
		0x2f, 0x7b, 0x76, 0x94, 0xfc, 0x70, 0xd7, 0x52, 
		0x4c, 0xd9, 0xb1, 0x92, 0x5d, 0x73, 0x2c, 0x04, 
		0xcb, 0xef, 0x14, 0xfe, 0x85, 0x03, 0x6c, 0xaf, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x23, 0x23, 0x53, 0x75, 0x56, 0x91, 0xa5, 0x5f, 
		0xfe, 0x92, 0x49, 0x66, 0x23, 0xf9, 0x7e, 0xbf, 
		0x09, 0x22, 0xf4, 0xec, 0xef, 0x46, 0x78, 0x24, 
		0x4a, 0x5e, 0xa6, 0x06, 0x7c, 0x0b, 0x17, 0x57, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x9d, 0x58, 0x4d, 0x44, 0x41, 0xba, 0xd3, 0x24, 
		0x0c, 0xab, 0x75, 0x1b, 0xd4, 0xd0, 0x64, 0x21, 
		0xed, 0x74, 0xfa, 0x0c, 0x0f, 0xc3, 0x59, 0x2a, 
		0xd7, 0x28, 0x37, 0x2c, 0x31, 0x03, 0x59, 0x6d, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x90, 0x2f, 0xaf, 0xa4, 0x66, 0xec, 0x19, 0xf5, 
		0x28, 0xd4, 0x5a, 0x29, 0x13, 0xba, 0x2d, 0x05, 
		0x9a, 0x58, 0xf2, 0x71, 0x56, 0xbc, 0x9c, 0x83, 
		0xf4, 0x6d, 0x7c, 0x6f, 0xd7, 0xf6, 0x16, 0x0c, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x23, 0x23, 0x53, 0x75, 0x56, 0x91, 0xa5, 0x5f, 
		0xfe, 0x92, 0x49, 0x66, 0x23, 0xf9, 0x7e, 0xbf, 
		0x09, 0x22, 0xf4, 0xec, 0xef, 0x46, 0x78, 0x24, 
		0x4a, 0x5e, 0xa6, 0x06, 0x7c, 0x0b, 0x17, 0x57, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xc7, 0x16, 0x33, 0xfb, 0xca, 0xeb, 0x93, 0x4d, 
		0x89, 0x6b, 0x0e, 0x62, 0xd3, 0xbb, 0x1d, 0x9f, 
		0xea, 0x33, 0xb4, 0xfd, 0x0e, 0x56, 0x95, 0xbc, 
		0x07, 0x1e, 0x68, 0xed, 0xf4, 0xf1, 0x12, 0x18, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x90, 0x2f, 0xaf, 0xa4, 0x66, 0xec, 0x19, 0xf5, 
		0x28, 0xd4, 0x5a, 0x29, 0x13, 0xba, 0x2d, 0x05, 
		0x9a, 0x58, 0xf2, 0x71, 0x56, 0xbc, 0x9c, 0x83, 
		0xf4, 0x6d, 0x7c, 0x6f, 0xd7, 0xf6, 0x16, 0x0c, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x8b, 0x09, 0x1f, 0x7c, 0x93, 0xca, 0xb2, 0x26, 
		0x28, 0x40, 0xa1, 0x41, 0xeb, 0x32, 0x24, 0xbc, 
		0x19, 0xb6, 0xae, 0x1b, 0x56, 0x8e, 0x6d, 0x76, 
		0x1c, 0x7e, 0x64, 0xab, 0xc1, 0x08, 0x96, 0xad, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xc7, 0x16, 0x33, 0xfb, 0xca, 0xeb, 0x93, 0x4d, 
		0x89, 0x6b, 0x0e, 0x62, 0xd3, 0xbb, 0x1d, 0x9f, 
		0xea, 0x33, 0xb4, 0xfd, 0x0e, 0x56, 0x95, 0xbc, 
		0x07, 0x1e, 0x68, 0xed, 0xf4, 0xf1, 0x12, 0x18, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xb6, 0x75, 0xe7, 0x67, 0x01, 0x06, 0x22, 0x90, 
		0x94, 0xba, 0x0e, 0xf1, 0x57, 0xdc, 0x2d, 0x87, 
		0xdd, 0x31, 0xdc, 0x05, 0x2a, 0xec, 0x89, 0x27, 
		0xdd, 0x03, 0x67, 0x19, 0xe4, 0xca, 0x9b, 0x51, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a, 
		0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9, 
		0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3, 
		0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0x8b, 0x09, 0x1f, 0x7c, 0x93, 0xca, 0xb2, 0x26, 
		0x28, 0x40, 0xa1, 0x41, 0xeb, 0x32, 0x24, 0xbc, 
		0x19, 0xb6, 0xae, 0x1b, 0x56, 0x8e, 0x6d, 0x76, 
		0x1c, 0x7e, 0x64, 0xab, 0xc1, 0x08, 0x96, 0xad, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0xd3, 0x2f, 0x8e, 0xae, 0x91, 0xa4, 0x15, 0x7d, 
		0x67, 0x3a, 0x3e, 0x6a, 0x22, 0x67, 0x1e, 0xa2, 
		0x79, 0x79, 0x9e, 0x2f, 0x02, 0x0a, 0x98, 0xc6, 
		0x9b, 0xa0, 0xfc, 0x16, 0x39, 0x9d, 0xc3, 0x70, 
	}),
},
&token.BorderDef {
	Father: chainhash.Hash([chainhash.HashSize]byte{
		0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd, 
		0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c, 
		0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36, 
		0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a, 
	}),
	Begin: chainhash.Hash([chainhash.HashSize]byte{
		0xb6, 0x75, 0xe7, 0x67, 0x01, 0x06, 0x22, 0x90, 
		0x94, 0xba, 0x0e, 0xf1, 0x57, 0xdc, 0x2d, 0x87, 
		0xdd, 0x31, 0xdc, 0x05, 0x2a, 0xec, 0x89, 0x27, 
		0xdd, 0x03, 0x67, 0x19, 0xe4, 0xca, 0x9b, 0x51, 
	}),
	End: chainhash.Hash([chainhash.HashSize]byte{
		0x60, 0x90, 0xbf, 0x11, 0xeb, 0x17, 0xf9, 0xad, 
		0x13, 0xfe, 0xb4, 0x3a, 0x16, 0x85, 0x40, 0xb5, 
		0x81, 0x1e, 0x32, 0x5b, 0x36, 0xc8, 0xfd, 0x3c, 
		0x7a, 0xf4, 0x40, 0xb3, 0x2c, 0x2c, 0x33, 0xb9, 
	}),
},
&token.PolygonDef {	Loops: []token.LoopDef{{	// Loop 0:
	chainhash.Hash([chainhash.HashSize]byte{
			0x10, 0x33, 0xc6, 0x9f, 0xfd, 0x4d, 0x33, 0x2a,
			0x7c, 0x85, 0xb8, 0x5a, 0x26, 0xfd, 0x90, 0xa9,
			0xd1, 0x5c, 0xf0, 0x6c, 0x11, 0x69, 0x42, 0xb3,
			0xe4, 0xf2, 0xbc, 0xa5, 0x0e, 0x26, 0x1f, 0xb2,
		}),chainhash.Hash([chainhash.HashSize]byte{
			0xc0, 0x19, 0xbe, 0xbe, 0xfe, 0x60, 0x80, 0xa6,
			0xb5, 0x91, 0x5f, 0x6c, 0x8b, 0xb8, 0xb1, 0xcf,
			0x15, 0x1a, 0x38, 0xe0, 0xcb, 0x85, 0x98, 0xda,
			0xcc, 0xfc, 0x91, 0xf3, 0x0a, 0xba, 0x20, 0x5a,
		}),chainhash.Hash([chainhash.HashSize]byte{
			0x1a, 0x1e, 0x2d, 0x57, 0x80, 0xdd, 0x0c, 0xdd,
			0x36, 0x4e, 0x88, 0xa0, 0x4e, 0x75, 0x35, 0x3c,
			0x59, 0x3c, 0xd0, 0x17, 0x3f, 0x00, 0xa2, 0x36,
			0xd0, 0x33, 0x5a, 0x04, 0x1e, 0x5e, 0x41, 0x7a,
		}),chainhash.Hash([chainhash.HashSize]byte{
			0x90, 0x2c, 0xc0, 0x72, 0xe4, 0x2f, 0x8a, 0x53,
			0xd4, 0x09, 0x32, 0xbc, 0x90, 0x9c, 0x0f, 0xda,
			0x4e, 0x55, 0xd2, 0x58, 0x88, 0x72, 0xf8, 0xac,
			0xf3, 0xd0, 0x62, 0x3c, 0x12, 0xbf, 0x90, 0xcd,
		}),	},
	},
},
&token.RightDef {Father: chainhash.Hash([chainhash.HashSize]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	}),
	Desc: []byte("All Rights"),
	Attrib: 3,
},
}

// genesisCoinbaseTx is the coinbase transaction for the genesis blocks for
// the main network, regression test network, and test network (version 3).

var coinToken = token.Token{
	TokenType: 0,
	Value: &token.NumToken{Val: 5000000000},
	Rights: &chainhash.Hash{},
}

var genesisCoinbaseTx = wire.MsgTx{
	Version: 1,
	TxDef: []token.Definition{},
	TxIn: []*wire.TxIn{
		{
			PreviousOutPoint: wire.OutPoint{
				Hash:  chainhash.Hash{},
				Index: 0xffffffff,
			},
			SignatureIndex: 0xffffffff,
			Sequence: 0xffffffff,
		},
	},
	TxOut: []*wire.TxOut{
		{
			Token:coinToken,
			PkScript: []byte{
				0x6f, 0x2f, 0xe0, 0xef, 0x92, 0x85, 0xa1, 0x0e, 0x86, 0x0c, 0x25, 0xe0,
				0x3c, 0x3f, 0xf8, 0x59, 0x93, 0xd3, 0xff, 0xc3, 0x5e, 0x41, 0x00, 0x00, 0x00,
			},
		},
	},
	SignatureScripts: [][]byte { []byte{
		0xd1, 0x7d, 0x1f, 0x19, 0xa6, 0x7d, 0x45, 0x05, 
		0xff, 0x84, 0xee, 0x59, 0x93, 0xcb, 0xdd, 0x44, 
		0xc8, 0x69, 0x1e, 0x5e, 0xff, 0x52, 0xa7, 0xa7, 
		0x50, 0x6e, 0x86, 0x81, 0xcd, 0xf4, 0x49, 0x41, 
	} },
	LockTime: 0,
}

var polygonToken = token.Token{
	TokenType: 3,
	Value: &token.HashToken{Hash: chainhash.Hash([chainhash.HashSize]byte{
		0xcb, 0x27, 0x8f, 0x30, 0x73, 0xa3, 0xc4, 0xee, 
		0x22, 0x9f, 0x14, 0x4d, 0x93, 0xef, 0x76, 0x4d, 
		0xdf, 0xa1, 0xee, 0xa3, 0x7c, 0xd9, 0xbf, 0xf9, 
		0x8e, 0xc4, 0x31, 0x6a, 0x67, 0x84, 0xe9, 0xa9, 
	})},
	Rights: &chainhash.Hash{
		0x26, 0x76, 0x88, 0xb6, 0x9c, 0x2b, 0xba, 0xa2, 
		0x8c, 0x3c, 0x32, 0x16, 0x3a, 0x92, 0x41, 0x50, 
		0x1a, 0xbd, 0x95, 0x8a, 0xe3, 0xca, 0x2b, 0x60, 
		0xee, 0x9a, 0x8f, 0xd0, 0xc2, 0xec, 0xe6, 0x59, 
	},
}

var genesisInitPolygonTx = wire.MsgTx{
	Version: 1,
	TxDef: InitDefs,
	TxIn: []*wire.TxIn{},
	TxOut: []*wire.TxOut{
		{
			Token:polygonToken,
			PkScript: []byte{
				0x6f, 0x2f, 0xe0, 0xef, 0x92, 0x85, 0xa1, 0x0e, 0x86, 0x0c, 0x25, 0xe0,
				0x3c, 0x3f, 0xf8, 0x59, 0x93, 0xd3, 0xff, 0xc3, 0x5e, 0x41, 0x00, 0x00, 0x00,
			},
		},
	},
	LockTime: 0,
}

// genesisMerkleRoot is the hash of the first transaction in the genesis block
// for the main network. ----
var GenesisMerkleRoot = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
		0xd1, 0x7d, 0x1f, 0x19, 0xa6, 0x7d, 0x45, 0x05, 
		0xff, 0x84, 0xee, 0x59, 0x93, 0xcb, 0xdd, 0x44, 
		0xc8, 0x69, 0x1e, 0x5e, 0xff, 0x52, 0xa7, 0xa7, 
		0x50, 0x6e, 0x86, 0x81, 0xcd, 0xf4, 0x49, 0x41, 
})

// genesisBlock defines the genesis block of the block chain which serves as the
// public transaction ledger for the main network.
var GenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: GenesisMerkleRoot,        //
		Timestamp:  time.Unix(0x5dde290d, 0), //
		Bits:       0x1f00ffff,               // 
		Nonce:      203600,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}

// genesisHash is the hash of the first block in the block chain for the main
// network (genesis block). ----
var GenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
		0x15, 0x58, 0x87, 0xb5, 0x8b, 0x5e, 0x5a, 0xf0, 
		0xd6, 0x7a, 0xf7, 0xaa, 0x70, 0x11, 0xc3, 0x7e, 
		0x50, 0x3c, 0x34, 0x35, 0xf6, 0xdf, 0x5e, 0x7d, 
		0xad, 0x01, 0x11, 0x1b, 0xfe, 0x80, 0x00, 0x00, 
})

// regTestGenesisHash is the hash of the first block in the block chain for the
// regression test network (genesis block).
var RegTestGenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
		0xc2, 0xc5, 0x33, 0x95, 0xc8, 0x57, 0x91, 0x3d, 
		0x84, 0x8b, 0x08, 0x9b, 0x73, 0x2b, 0xf7, 0x4c, 
		0xc1, 0xca, 0x11, 0x9e, 0x4b, 0x07, 0x49, 0x50, 
		0xbf, 0xb3, 0x71, 0xd6, 0x09, 0x08, 0x59, 0x00, 
})

// regTestGenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the regression test network.  It is the same as the merkle root for
// the main network.
var RegTestGenesisMerkleRoot = GenesisMerkleRoot

// regTestGenesisBlock defines the genesis block of the block chain which serves
// as the public transaction ledger for the regression test network.
var RegTestGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: RegTestGenesisMerkleRoot, //
		Timestamp:  time.Unix(0x5dde294d, 0), //
		Bits:       0x1f7fffff,               //
		Nonce:      4,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}

// testNet3GenesisHash is the hash of the first block in the block chain for the
// test network (version 3).
var TestNet3GenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
		0x5a, 0xbb, 0xd8, 0xff, 0x17, 0xb8, 0x97, 0x47, 
		0x58, 0x66, 0x3b, 0x04, 0x80, 0x58, 0x5c, 0xb3, 
		0x3b, 0x4c, 0xee, 0x7f, 0x9b, 0xc0, 0xbb, 0x52, 
		0xc6, 0x3b, 0x6b, 0x14, 0x62, 0x56, 0x00, 0x00, 
})

// testNet3GenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the test network (version 3).  It is the same as the merkle root
// for the main network.
var TestNet3GenesisMerkleRoot = GenesisMerkleRoot

// testNet3GenesisBlock defines the genesis block of the block chain which
// serves as the public transaction ledger for the test network (version 3).
var TestNet3GenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},          // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: TestNet3GenesisMerkleRoot, //
		Timestamp:  time.Unix(0x5dde294d, 0), //
		Bits:       0x1f00ffff,                //
		Nonce:      223848,                // 414098458
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}

// simNetGenesisHash is the hash of the first block in the block chain for the
// simulation test network.
var SimNetGenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
		0x0b, 0xc7, 0x83, 0xd2, 0x0b, 0xbd, 0xf9, 0x33, 
		0xf5, 0xcb, 0x5a, 0x05, 0xb4, 0x67, 0xcf, 0x8b, 
		0x94, 0x56, 0x2b, 0xaf, 0x0b, 0x21, 0x53, 0x11, 
		0xe3, 0x8e, 0x62, 0x61, 0xa3, 0xf6, 0x50, 0x00, 
})

// simNetGenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the simulation test network.  It is the same as the merkle root for
// the main network.
var SimNetGenesisMerkleRoot = GenesisMerkleRoot

// simNetGenesisBlock defines the genesis block of the block chain which serves
// as the public transaction ledger for the simulation test network.
var SimNetGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    0x10000000,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: SimNetGenesisMerkleRoot,  //
		Timestamp:  time.Unix(0x5dde2992, 0), //
		Bits:       0x1f7fffff,               //
		Nonce:      165,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx, &genesisInitPolygonTx},
}
