MALLOC gi0,24,		; storage to use
STORE abi("owner"),kx02d98961b3c23a8642e8a4e5779f48ffb04ffe2095766f591d97072097efd75ea1,	; pub key (not address) of owner: 1KcMgJmKZFM1qzqNGUtjMVNGxLJREo9uZh; test net priv key: cVbHBhB9J2JBHN35rBhjCwc9aRy131Q5BPcHjcBB457HMKmC6RhS
STORE abi("ownersequence"),D0,
EVAL32 gi0,4,		; length of result
EVAL32 gi4,6,		; result = the first instruction of regular code.
STOP
MALLOC gii0"8,1024,	; storage to use
EVAL32 gii0"16,abi("suicide(uint32,[]byte)"),gi8,=	; func(nonce,owner's signature on contract address+nonce+ownersequence)
IF gii0"16,14,
EVAL32 gii0"16,abi("incownerseq()"),gi8,=	; inc ownersequence
IF gii0"16,4,
EVAL32 gii0"16,abi("getownerseq()uint64"),gi8,=
IF gii0"16,7,
REVERT
LOAD gii0"16,abi("ownersequence"),
EVAL32 gii0"16,gii0"16,1,+
STORE abi("ownersequence"),Dgii0"16,
EVAL32 gi0,0,
STOP
LOAD gi0,abi("ownersequence"),
EVAL32 gi0,4,
STOP
META gii0"16,7,"address",		; first 4 bytes are length = 20, thus next data item starts at gii0"40
LOAD gii0"40,abi("ownersequence"),	; because the first 4 byte is length field which we don't need, we load it fisrt and use the next inst. to override the length field
EVAL32 gii0"40,gi12,
LOAD gii0"77,abi("owner"),		; again load return with 4 byte length. use hash to overwrite it
EVAL8 gii0"80,gii0"77,			; 4 byte length to 1 byte length as reqired by pub key format
HASH gii0"48,gii0"20,28,
SIGCHECK gi8,gii0"48,gii0"80,gi16,	; gi8 - result, gii0"48 - hash, gii0"80 - pubkey, gi16 - sig input,
IF gi8,2,
REVERT
SELFDESTRUCT


Rgi0,24,
Ox04000100,kx02d98961b3c23a8642e8a4e5779f48ffb04ffe2095766f591d97072097efd75ea1,
Ox02040500,D0,
Cgi0,4,
Cgi4,6,
z
Rgii0"8,1024,
Cgii0"16,x00020301,gi8,=
Kgii0"16,14,
Cgii0"16,x00020107,gi8,=
Kgii0"16,4,
Cgii0"16,x00040800,gi8,=
Kgii0"16,7,
X
Ngii0"16,x02040500,
Cgii0"16,gii0"16,1,+
Ox02040500,Dgii0"16,
Cgi0,0,
z
Ngi0,x02040500,
Cgi0,4,
z
kgii0"16,7,x61646472657373,
Ngii0"40,x02040500,
Cgii0"40,gi12,
Ngii0"77,x04000100,
Agii0"80,gii0"77,
Ggii0"48,gii0"20,28,
Igi8,gii0"48,gii0"80,gi16,
Kgi8,2,
X
W

7b9ebb2e1a8a75484b23b712a032ccb518f7be6b
887b9ebb2e1a8a75484b23b712a032ccb518f7be6b00000000526769302c32342c0a4f7830343030303130302c6b783032643938393631623363323361383634326538613465353737396634386666623034666665323039353736366635393164393730373230393765666437356561312c0a4f7830323034303530302c44302c0d0a436769302c342c0a436769342c362c0a7a0a526769693022382c313032342c0a43676969302231362c7830303032303330312c6769382c3d0a4b676969302231362c31342c0d0a43676969302231362c7830303032303130372c6769382c3d0a4b676969302231362c342c0d0a43676969302231362c7830303034303830302c6769382c3d0d0a4b676969302231362c372c0d0a580a4e676969302231362c7830323034303530302c0d0a43676969302231362c676969302231362c312c2b0d0a4f7830323034303530302c44676969302231362c0d0a436769302c302c0d0a7a0a4e6769302c7830323034303530302c0d0a436769302c342c0d0a7a0a6b676969302231362c372c7836313634363437323635373337332c0a4e676969302234302c7830323034303530302c0a43676969302234302c676931322c0d0a4e676969302237372c7830343030303130302c0a41676969302238302c676969302237372c0a47676969302234382c676969302232302c32382c0d0a496769382c676969302234382c676969302238302c676931362c0a4b6769382c322c0d0a580a570a0a


creation tx:  54b62ebd7180ea04e40e9891028b4e47f557b4b3786e219afbea3ba21c17bda4

destruct tx: ddc799486bb06b45fe4e0c20c2abb0a3f5de2aef19a03c5f8276570dcfd2d177

script: 887b9ebb2e1a8a75484b23b712a032ccb518f7be6b0103020023741503473044022029430e6614942ed8c7b066e6861edc7f1e319aefac66c26414b9f981c95191250220012702608ddc06e6da3e749e69db79868795cf032905a9208f61ecb4eb7425fd

nonce: 23741503

7b9ebb2e1a8a75484b23b712a032ccb518f7be6b2374150300000000 => hash 712f5d58a8ff7eb22bac5a83926436ffccbb3151fcbd93e279883c9bc79614c7 => sig 
3044022029430e6614942ed8c7b066e6861edc7f1e319aefac66c26414b9f981c95191250220012702608ddc06e6da3e749e69db79868795cf032905a9208f61ecb4eb7425fd



